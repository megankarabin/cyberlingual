<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>cyberlingual</title><link href="https://megankarabin.github.io/cyberlingual/" rel="alternate"></link><link href="https://megankarabin.github.io/cyberlingual/feeds/all.atom.xml" rel="self"></link><id>https://megankarabin.github.io/cyberlingual/</id><updated>2021-05-07T20:00:00-04:00</updated><entry><title>Thought parsing: Information, communication, and intelligence</title><link href="https://megankarabin.github.io/cyberlingual/musings-i.html" rel="alternate"></link><published>2021-05-07T20:00:00-04:00</published><updated>2021-05-07T20:00:00-04:00</updated><author><name>Megan Karabin</name></author><id>tag:megankarabin.github.io,2021-05-07:/cyberlingual/musings-i.html</id><summary type="html">&lt;h5&gt;is information just an attributional property of the interaction between space-time (non-exclusive to matter, but rather anything that exists&lt;sup&gt;1&lt;/sup&gt;) and&amp;nbsp;perception?&lt;/h5&gt;
&lt;p&gt;Matter (within the bounds and constraints of space-time in the observable universe) and space itself has certain qualitative attributes&amp;mdash;in the form of physical properties, broadly speaking&amp;mdash;like …&lt;/p&gt;</summary><content type="html">&lt;h5&gt;is information just an attributional property of the interaction between space-time (non-exclusive to matter, but rather anything that exists&lt;sup&gt;1&lt;/sup&gt;) and&amp;nbsp;perception?&lt;/h5&gt;
&lt;p&gt;Matter (within the bounds and constraints of space-time in the observable universe) and space itself has certain qualitative attributes&amp;mdash;in the form of physical properties, broadly speaking&amp;mdash;like mass, energy, and density (on the elemental side), and colour, texture/surface variation, and the like (on the secondary, or emergent-property side). The vacuum of space is, well, a vacuum. It contains no substance, has no atmosphere&amp;mdash;in other words, there is an absence of matter. Science notably uses these qualities&amp;mdash;this &lt;em&gt;information&lt;/em&gt;&amp;mdash;to draw conclusions about things (e.g., their past, present and future states), and the relationship between such things and other things. I would argue that the term “information” is in many ways analogous to the question of whether a tree makes a sound when it falls but no one is around to hear it. Quantum theories, of course, would say that the tree neither fell nor didn’t until the moment an observer happened upon it, and in perceiving it, forced an outcome. Information is much the same—consider the observer effect. Information&amp;mdash;e.g., photon behaviour&amp;mdash;can be altered &lt;em&gt;depending on whether it is being measured or not&lt;/em&gt;. This brings us back to the original suggestion: that information is only possibly conceived as such if there is in fact an “informee”, an observer or perceiving entity, to be informed. One might counter that we could have information but be unable to make use of it, such as if one received a letter written in a foreign language, with an altogether unfamiliar orthography. While it is true that you might not be able to understand the intended semantic content (if indeed there was any to begin with—but let’s assume that this letter was written by a real person, in their—real—native language, so there was), you are still able to access the informational output (the symbols), only you don’t have the key to hash the author’s meaning. On the other hand, we could consider information to simply be anything that is, and specifically, anything that can either be measured or observed, or be inferred based on other measurements and observations. Information is…stuff. Or patterns caused by stuff. Which itself, is effectively stuff (though perhaps qualitatively different stuff, via a human understanding). While this definition doesn’t explicitly necessitate the existence of a perceiver, it is implicitly&amp;nbsp;commanded.&lt;/p&gt;
&lt;h5&gt;Language as a basis for communication of&amp;nbsp;information&lt;/h5&gt;
&lt;p&gt;We tend to think that language represents an objective reality, at least to some degree, because functionally, it would appear that way. You can input an address into a &lt;span class="caps"&gt;GPS&lt;/span&gt; and arrive at your destination flawlessly (in theory) solely by following verbal directions provided by the disembodied robot-woman voice projecting from the device. Proof&amp;mdash;language reflects objective reality. It, like so many other examples of exquisite cooperation and task execution made possible exclusively by language, is compelling evidence that language does consistently transmit information effectively and successfully. Yet there are infinite things that we do not have words for. Language, therefore, reflects but a tiny sliver of That Which Exists, and in order to better understand ourselves&amp;mdash;human cognition, reasoning, learning&amp;mdash;we must ask: what pieces, which parts of perceivable reality do we attend to, such that they achieve lexicalized status in our collective vocabulary? Which concepts, which forms, which configurations of matter—and which relationships between forms and configurations—are salient to humans such that we linguistically (and by extension conceptually) materialize their existence? Of course the answer is right in front of us: those which &lt;em&gt;are&lt;/em&gt; linguistically materialized, as lexical-semantic entries. And so, we might approach this from a slightly different angle: given the linguistic-conceptual distribution observed (cross-linguistically&lt;sup&gt;2&lt;/sup&gt;, as well) what are the features of reality that human beings attend to? More abstractly, how do humans attend to, identify, classify and categorize, and prioritize &lt;em&gt;information&lt;/em&gt; available from their environment (not necessarily in the order listed), and specifically, do so in order to acquire and use language, and then further use the language they have to acquire new, often more complex information and concepts? Are the processes (i.e., the initial learning involved in language acquisition and the learning facilitated by language literacy) analogous? On a slightly divergent note, there is a wealth of literature and previous work on language concreteness, which distinguishes between concrete and abstract language, and significant evidence supports a differentiation between the two (child acquisition, comprehension/processing, &lt;span class="caps"&gt;LCM&lt;/span&gt;). However, a “chair”, despite representing a concrete thing (as opposed to, say, “justice”, a markedly abstract label in terms of what it represents), is unavoidably abstract&amp;mdash;it is arbitrary (no correspondence in features between the label and the thing it represents, cf. de Saussure), and also requires that we have a stored conceptual prototype for that which constitutes a chair. How do we differentiate a chair from a table? From a stool? From a short bench? Broadly speaking, the answer is by their&amp;mdash;&lt;em&gt;differential&lt;/em&gt;&amp;mdash;salient features. But let us pause, and consider: what does “salient” actually mean here? Salience in this context&amp;mdash;as in most&amp;mdash;refers to &lt;em&gt;perceptual&lt;/em&gt; salience. Perceptual salience presupposes a perceiver&amp;mdash;and naturally, we, humans, are the perceivers (of course we could include other animals under this umbrella without altering the argument in any significant way). So, more precisely, the answer to the question of how we differentiate (e.g. functionally similar) objects is actually: by their perceptually salient differential/distinguishing features. The problem of artificial intelligence (&lt;span class="caps"&gt;AI&lt;/span&gt;) primitiveness, in many ways, is linked to this (largely) defining property of general intelligence (&lt;span class="caps"&gt;GI&lt;/span&gt;) and categorization ability in humans. &lt;span class="caps"&gt;AI&lt;/span&gt; is capable of far surpassing human computational and predictive ability in many respects, and capable of modeling data (extracting patterns from and organizing information) in ways a human being is simply not able to do. Yet humans still outperform &lt;span class="caps"&gt;AI&lt;/span&gt; on nearly every domain-general skill and especially, famously, natural language use. In perceiving, humans are critically, selectively and preferentially attending to certain specific patterns and pieces of information that &lt;span class="caps"&gt;AI&lt;/span&gt; algorithms are not. Is this because they (the &lt;span class="caps"&gt;AI&lt;/span&gt;) are attending equally to all information? Or selectively attending to different pieces of information? Or, selectively attending to the same information, but in a qualitatively&amp;mdash;even categorically&amp;mdash;different way? Or, is it because an &lt;span class="caps"&gt;AI&lt;/span&gt; algorithm is only exposed to a slice of data, compared to the virtually infinite information&amp;mdash;and potential loci of focus—available to humans from the moment of birth onward through their existence? To be precise, it isn’t the information per se that is infinite, but rather, the possibilities arising from innumerable potential interpretations of it, in countless different conceptualizations. And so equally interesting, is it not, that despite this overwhelming quantity of data, of sensory stimuli that we must constantly, ceaselessly sift through and process, that we collectively settle on very consistent interpretations. This would appear to be a function less of the inherent salience of any particular feature or facet of information, and more one of the human condition. This epistemological, Kantian quandary poses a unique problem for the puzzle of &lt;span class="caps"&gt;AI&lt;/span&gt;, with a twist: if we can only know the world and reality such as we subjectively perceive it via our senses (and by extension our cognition), how can we expect an artificial (i.e., not naturally occurring, as in biological life-forms created via sexual reproduction) intelligence to perform complex, human-centric tasks (some of which, like language, as well as music, are fundamental and universal in our species) with a high degree of efficacy unless it is imbued with the same motivations, capacities, and tools as those of humans which are required to carry out such functions? Additionally, the problem of stunted artificial intelligence invites us, in a rather meta way, to revisit the concept-label mapping of the term “artificial intelligence” itself, along with its corresponding conceptual realization. It’s interesting that the bar for what is considered intelligence artificially is apparently much lower than the criteria for evaluation of natural intelligence. This discordance may lie at the heart of the issues faced by the field, and may also be the key to novel breakthroughs and discovery. Perhaps through no ill intent, the term &lt;span class="caps"&gt;AI&lt;/span&gt; has been misappropriated in an excited haste to christen a but-nascent field with a title it has not earned. Intelligence must be globally operationalized (i.e., defined) if we are to make greater strides toward machine learning algorithms that can competently carry out complex tasks at a human-like (or human-superior) level of ability&amp;mdash;including learning and generalizing knowledge. This last point raises the additional and nontrivial concern of whether or not we &lt;em&gt;should&lt;/em&gt; strive to create a system with human-based intelligence, and thus demands rigorous, careful, and holistic ethical consideration before proceeding with active attempts to create such an&amp;nbsp;entity.&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt;in this discussion, “exists” is simply a convenient/simplified way of saying “anything measurable within the bounds and constraints of the physics of the observable universe” (including emergent properties and relationships between&amp;nbsp;things)&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;2&lt;/sup&gt;this would additionally require a typological investigation/comparison to see if there are any differences in this distribution as a function of language or language family, but assuming for now that the distribution is similar&amp;nbsp;cross-linguistically&lt;/p&gt;</content><category term="musings"></category></entry><entry><title>An Exercise in BS4: Scraping language typological data</title><link href="https://megankarabin.github.io/cyberlingual/ethnologue-scraping.html" rel="alternate"></link><published>2021-04-18T21:09:00-04:00</published><updated>2021-04-18T21:09:00-04:00</updated><author><name>Megan Karabin</name></author><id>tag:megankarabin.github.io,2021-04-18:/cyberlingual/ethnologue-scraping.html</id><summary type="html">&lt;p&gt;&lt;img src="images\world-greetings.jpg" alt="Drawing" style="width: 500px;"/&gt;
&lt;em&gt;&lt;a href="https://assets.ltkcontent.com/images/24318/30881.world-greetings_0066f46bde.jpg"&gt;Image&amp;nbsp;source&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This post demonstrates how bs4&amp;#8217;s BeautifulSoup can be deployed to scrape webpages. The example I&amp;#8217;ve created here uses data on languages and language families from &lt;a href="https://www.ethnologue.com/"&gt;Ethnologue.com&lt;/a&gt;, a robust digital catalogue of typological information on the world&amp;#8217;s&amp;nbsp;languages.&lt;/p&gt;
&lt;p&gt;Check out &amp;#8220;Spin the Wheel&amp;#8221;, the function …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="images\world-greetings.jpg" alt="Drawing" style="width: 500px;"/&gt;
&lt;em&gt;&lt;a href="https://assets.ltkcontent.com/images/24318/30881.world-greetings_0066f46bde.jpg"&gt;Image&amp;nbsp;source&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This post demonstrates how bs4&amp;#8217;s BeautifulSoup can be deployed to scrape webpages. The example I&amp;#8217;ve created here uses data on languages and language families from &lt;a href="https://www.ethnologue.com/"&gt;Ethnologue.com&lt;/a&gt;, a robust digital catalogue of typological information on the world&amp;#8217;s&amp;nbsp;languages.&lt;/p&gt;
&lt;p&gt;Check out &amp;#8220;Spin the Wheel&amp;#8221;, the function I created to randomly select a language and display its primary typological features (name, country of origin, language family, genetic subgroups). A fun and easy way to learn about the countless (well, 7400ish) other terrestrial languages hitherto unknown to me!
&lt;!-- My linguistics background is considerably focused on Indo-European languages,  --&gt;&lt;/p&gt;
&lt;h2&gt;Table of&amp;nbsp;Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#step_one"&gt;Step One: Get a list of page&amp;nbsp;URLs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step_two"&gt;Step Two: Create basic language&amp;nbsp;dictionaries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step_three"&gt;Step Three: Add language-specific info from each language&amp;nbsp;page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step_four"&gt;Step Four: Write a function to pick a language, any&amp;nbsp;language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Packages&amp;nbsp;used:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- # Scraping language data from webpages --&gt;

&lt;p&gt;&amp;nbsp;  &lt;/p&gt;
&lt;h2&gt;Step One: Get a list of page URLs🔗&lt;a name='step_one'&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Each &lt;a href="https://www.ethnologue.com/browse/names/a"&gt;Browse by Language Name&lt;/a&gt; page (corresponding to a letter from A-Z) contains an enormous list of languages. In order to access every language individually, we must first be able to access each&amp;nbsp;page.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;span class="caps"&gt;URL&lt;/span&gt; for the &amp;#8220;A&amp;#8221; page is https://www.ethnologue.com/browse/names/a, the &amp;#8220;B&amp;#8221; page is https://www.ethnologue.com/browse/names/b,&amp;nbsp;usw.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We&amp;#8217;ll use a loop to compile a list of URLs, each made up of the common base (https://www.ethnologue.com/browse/names/) plus each respective letter of the&amp;nbsp;alphabet.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;1. Use the &lt;code&gt;map&lt;/code&gt; method to access the lowercase alphabet from the built-in character&amp;nbsp;list.&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;alpha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There&amp;#8217;s one additional page after Z &amp;mdash; &amp;#8220;ǀ&amp;#8221;, which is the &lt;a href="https://en.wikipedia.org/wiki/International_Phonetic_Alphabet"&gt;&lt;span class="caps"&gt;IPA&lt;/span&gt;&lt;/a&gt; symbol for a &lt;a href="https://en.wiktionary.org/wiki/%C7%80"&gt;dental click&lt;/a&gt;.
Just append this to &lt;code&gt;alpha&lt;/code&gt; and we&amp;#8217;re good to&amp;nbsp;go.&lt;/p&gt;
&lt;p&gt;&lt;i&gt;Note: although it resembles the standard pipe operator (and despite the fact that it&amp;#8217;s also called a &amp;#8220;pipe letter&amp;#8221;), these are not the same&amp;nbsp;symbol. &lt;/i&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ǀ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;2. Create a list containing the corresponding &lt;span class="caps"&gt;URL&lt;/span&gt; for each letter a-z by looping over the &lt;code&gt;alpha&lt;/code&gt; list.&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First create an empty list called &lt;code&gt;urls&lt;/code&gt;. Then take the base of the &lt;span class="caps"&gt;URL&lt;/span&gt; that&amp;#8217;s common to each page, and assign it to the variable &lt;code&gt;url_start&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The for loop adds the complete &lt;span class="caps"&gt;URL&lt;/span&gt; to &lt;code&gt;urls&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;url_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://www.ethnologue.com/browse/names/&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_start&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Inspecting the list of URLs we just added&amp;nbsp;to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;

  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://www.ethnologue.com/browse/names/x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s1"&gt;&amp;#39;https://www.ethnologue.com/browse/names/y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s1"&gt;&amp;#39;https://www.ethnologue.com/browse/names/z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s1"&gt;&amp;#39;https://www.ethnologue.com/browse/names/ǀ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I&amp;#8217;ll be using the root &lt;span class="caps"&gt;URL&lt;/span&gt; a few times in the next couple of steps, so here I&amp;#8217;m assigning it to a variable called &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://www.ethnologue.com&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;nbsp;  &lt;/p&gt;
&lt;h2&gt;Step Two: Create basic language dicts📚&lt;a name='step_two'&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Next, loop through all pages A-Z and make a list containing language&amp;nbsp;dictionaries.&lt;/p&gt;
&lt;p&gt;The language dictionaries will store all of the relevant language information available on the current&amp;nbsp;page.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# empty list to contain language dicts&lt;/span&gt;
&lt;span class="n"&gt;languages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="c1"&gt;# iterating through each page A-Z&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;lxml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;item_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;span&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;field-content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="c1"&gt;# each item is a language listed on the page&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;item_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;language&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="c1"&gt;# initialize empty dict to store the available info for the language&lt;/span&gt;
        &lt;span class="n"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;href&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
        &lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;slug&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;
        &lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;link&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;
        &lt;span class="n"&gt;languages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Peeking at the last three entries in our &lt;code&gt;languages&lt;/code&gt; list:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;languages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;

  &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Zuni&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;slug&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/language/zun&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;link&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://www.ethnologue.com/language/zun&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ǀGwi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;slug&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/language/gwj&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;link&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://www.ethnologue.com/language/gwj&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ǀXam&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;slug&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/language/xam&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;link&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://www.ethnologue.com/language/xam&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Checking how many languages are in the&amp;nbsp;list:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;languages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="mi"&gt;7545&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cool. We now have a master list containing the name, slug and page link for each of the 7545 languages listed in the &amp;#8220;Browse by Language Name&amp;#8221;&amp;nbsp;pages.&lt;/p&gt;
&lt;p&gt;I definitely want to add to the language dicts more specific information, which can be scraped from the individual language pages in Step&amp;nbsp;Three.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;  &lt;/p&gt;
&lt;h2&gt;Step Three: Add language-specific info from each language page📄&lt;a name='step_three'&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h4&gt;Quick Tip: &lt;code&gt;enumerate()&lt;/code&gt; in for&amp;nbsp;loops&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;enumerate()&lt;/code&gt; iterates over an iterable and produces an enumerate object, which is a tuple of the form &lt;code&gt;(count, value)&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Where a value &lt;i&gt;x&lt;/i&gt; is the &lt;i&gt;n&lt;/i&gt;th item in an iterable, &lt;code&gt;count&lt;/code&gt; = &lt;i&gt;n&lt;/i&gt; and &lt;code&gt;value&lt;/code&gt; = &lt;i&gt;x&lt;/i&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the following code, this is used to access the index of items in the iterable. See &lt;a href="https://docs.python.org/3/library/functions.html#enumerate"&gt;the documentation&lt;/a&gt; for how this works in a little more&amp;nbsp;detail.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: this took almost three hours to compile, what with a modest 7545 pages to scrape. Not for the faint of&amp;nbsp;heart/processor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;lang&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;languages&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c1"&gt;# getting the location of the current item&lt;/span&gt;
    &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;# scraping&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;link&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# I like to use this to see where the code is at as it&amp;#39;s running&lt;/span&gt;
    &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;lxml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# getting relevant info from the html&lt;/span&gt;
    &lt;span class="n"&gt;country_origin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;h2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;field-content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
    &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;views-field views-field-nothing-2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;span&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;href&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;subgroups_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;subgroups&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;span&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lineage-item&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;subgroups&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;subgroups_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# adding key-value pairs with relevant info to existing language dict&lt;/span&gt;
    &lt;span class="n"&gt;languages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;country_origin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;country_origin&lt;/span&gt;
    &lt;span class="n"&gt;languages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lineage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subgroups_list&lt;/span&gt;
    &lt;span class="n"&gt;languages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;additional_resources&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;resources&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subgroups_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;languages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;family&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# some languages have no family (e.g. language isolates)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;languages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;family&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subgroups_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;nbsp;&lt;br&gt;
Saving the updated &lt;code&gt;languages&lt;/code&gt; object with &lt;a href="https://docs.python.org/3/library/pickle.html"&gt;pickle&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pickle&lt;/span&gt;

&lt;span class="n"&gt;languages_obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;languages&lt;/span&gt;
&lt;span class="n"&gt;languages_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;languages.obj&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pickle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;languages_obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;languages_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;nbsp;&lt;br&gt;
Just writing a quick function to grab a random number (one that will correspond to the index of some language dict in  &lt;code&gt;languages&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_random&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;languages&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;nbsp;&lt;br&gt;
Now it&amp;#8217;s possible to index &lt;code&gt;languages&lt;/code&gt; at a random location with the &lt;code&gt;get_random()&lt;/code&gt; function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;languages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;get_random&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;

  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Mixtec, Ayutla&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s1"&gt;&amp;#39;slug&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/language/miy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s1"&gt;&amp;#39;link&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://www.ethnologue.com/language/miy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s1"&gt;&amp;#39;country_origin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Mexico&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s1"&gt;&amp;#39;lineage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Otomanguean&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;Eastern Otomanguean&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;Amuzgo-Mixtecan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;Mixtecan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;Mixtec&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
   &lt;span class="s1"&gt;&amp;#39;additional_resources&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://language-archives.org/language/miy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s1"&gt;&amp;#39;family&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Otomanguean&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;nbsp;  &lt;/p&gt;
&lt;h2&gt;Step Four: Write a function to pick a language, any language🎲&lt;a name='step_four'&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Use the following code to produce a random language and its typological information from the list of 7545 languages&amp;nbsp;🥳&lt;/p&gt;
&lt;p&gt;Note: there&amp;#8217;s no return statement in the following function, since the desired output is purely for visual&amp;nbsp;purposes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;spin_the_wheel&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

    &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;languages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;languages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;country_origin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;family&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;languages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;family&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;lineage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;languages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lineage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Language name: {name} &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
          &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Country of origin: {origin} &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
          &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Language Family: {family}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--- &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;Lineage: (in descending order from highest-level group)&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lineage&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lineage&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;nbsp;&lt;br&gt;
&lt;strong&gt;Give it a&amp;nbsp;spin&amp;#8230;&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;spin_the_wheel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;Language&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Balochi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Eastern&lt;/span&gt;
    &lt;span class="n"&gt;Country&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Pakistan&lt;/span&gt;
    &lt;span class="n"&gt;Language&lt;/span&gt; &lt;span class="n"&gt;Family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Indo&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;European&lt;/span&gt;
    &lt;span class="o"&gt;---&lt;/span&gt;
    &lt;span class="n"&gt;Lineage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;descending&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;highest&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt; &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;Indo&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;European&lt;/span&gt;
    &lt;span class="n"&gt;Indo&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Iranian&lt;/span&gt;
    &lt;span class="n"&gt;Iranian&lt;/span&gt;
    &lt;span class="n"&gt;Western&lt;/span&gt;
    &lt;span class="n"&gt;Northwestern&lt;/span&gt;
    &lt;span class="n"&gt;Balochi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;nbsp;  &lt;/p&gt;
&lt;h2&gt;Step Five: Discover some new&amp;nbsp;languages🗣💬&lt;/h2&gt;</content><category term="python"></category><category term="bs4"></category><category term="scraping"></category><category term="natural languages"></category></entry><entry><title>Everything is language</title><link href="https://megankarabin.github.io/cyberlingual/everything-is-language.html" rel="alternate"></link><published>2021-02-12T00:00:00-05:00</published><updated>2021-02-12T00:00:00-05:00</updated><author><name>Megan Karabin</name></author><id>tag:megankarabin.github.io,2021-02-12:/cyberlingual/everything-is-language.html</id><summary type="html">&lt;p&gt;Mathematical notation: language. Stock market and finance jargon: language. Poetry:&amp;nbsp;language.&lt;/p&gt;
&lt;p&gt;That last one is obvious, but you may not have thought about math and stocks as being fundamentally linguistic. The language (i.e., words) used can still &amp;#8220;correspond&amp;#8221; to English&lt;sup&gt;1&lt;/sup&gt;&amp;mdash;or whatever your native language may be&amp;mdash;but …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Mathematical notation: language. Stock market and finance jargon: language. Poetry:&amp;nbsp;language.&lt;/p&gt;
&lt;p&gt;That last one is obvious, but you may not have thought about math and stocks as being fundamentally linguistic. The language (i.e., words) used can still &amp;#8220;correspond&amp;#8221; to English&lt;sup&gt;1&lt;/sup&gt;&amp;mdash;or whatever your native language may be&amp;mdash;but it isn&amp;#8217;t always easily understood, and can feel quite foreign, if we&amp;#8217;re not familiar with the subject. This is a perfect example of context-dependent language, where, in North America, for example, the English you speak at home with your family is likely very different from the English you hear on a trading floor (unless you&amp;#8217;re from a family of bankers, maybe). Go into a software company&amp;#8217;s innovation or R&amp;amp;D department, or an &lt;span class="caps"&gt;IT&lt;/span&gt; branch of a cybersecurity company, or sit in on a symphony orchestra practicing, a gender studies class, or a court hearing or legal briefing. Listen to the language used at a university football practice, on a construction site, in a professional kitchen. What differentiates each of these domains? Of course the things they deal with seem vastly different&amp;mdash;sports, music, law, design, economics, philosophy and critical thought, computer programming&amp;mdash;but yet, any child who speaks the English language could grow up to participate in any one&amp;mdash;or any number&amp;mdash;of these fields. The common denominator is English. Yet&amp;mdash;what might you notice, in each of these environments? Would you be able to jump into the conversation in each of these places? Perhaps it would be the case that, given a lack of background knowledge or experience, you might find you are actually able to understand very little of what is being said. Is this because you&amp;#8217;re not intelligent enough, or don&amp;#8217;t have a handle on the English language? Of course not. Too often people&amp;mdash;capable, intelligent, valuable people&amp;mdash;are driven away from a domain because they feel unequipped to join the conversation. They assume that because they don&amp;#8217;t understand what&amp;#8217;s being said&amp;mdash;often in their own native language, no less&amp;mdash;they are either ill-suited to this particular subject matter, or they simply are not capable enough. This is &amp;#8220;starting at the end&amp;#8221;, as it were. Let&amp;#8217;s suppose you heard Zulu being spoken, and thought to yourself, &amp;#8220;what a beautiful language&amp;#8221;. Interested in learning it, you decided to sit in on an advanced Zulu class, and found that you understood nothing. Would you&amp;mdash;a beginner, with no prior knowledge of the language&amp;mdash;abandon the idea of pursuing learning Zulu altogether because you didn&amp;#8217;t understand what was being discussed at a predictably challenging higher level? Or, perhaps more interestingly, would you have even expected yourself to understand what was&amp;nbsp;happening?&lt;/p&gt;
&lt;p&gt;There is a sense that in learning a new language, one must start at the beginning. You need to first build up a vocabulary, an understanding of the structure of the language, knowledge about the culture in which the language is&amp;nbsp;spoken.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The same principle applies to every conceptual domain one can think of&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;There should be no shame in the naive quality of being a newcomer to a topic. Additionally, there should be no fear of a subject simply because at first pass, you find you&amp;#8217;re not quite able to understand or repeat back the new information. To the former: being a newcomer means you are unfamiliar with the jargon. It&amp;#8217;s as simple as that. It doesn&amp;#8217;t mean you&amp;#8217;re unable to grasp the information, the meaning, hidden being the terminology, but rather that you haven&amp;#8217;t yet learned what that&amp;mdash;often specific, often domain-specific&amp;mdash;meaning is. Take the term &lt;em&gt;polysemous&lt;/em&gt;. A perfect word for this context. As a linguist, I need to take care not to scare non-linguists away by using *unusual* terms (especially where I could choose more general, or domain-common, words instead). Notice I won&amp;#8217;t say &amp;#8220;big&amp;#8221; or &amp;#8220;complex&amp;#8221; words&amp;mdash;because other (small and simple yet equally confounding) words could fit here too. In any case, it&amp;#8217;s about relating to people. So rather than say domain-specific words can be confusing because they&amp;#8217;re often polysemous, I might say they can be confusing because they often have more than one meaning. Polysemous = has more than one meaning. Easy,&amp;nbsp;right?&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;em&gt;poly&lt;/em&gt; =&amp;nbsp;many&lt;/p&gt;
&lt;p&gt;&amp;nbsp;
&lt;em&gt;sem&lt;/em&gt; = sign&amp;nbsp;(Greek)&lt;/p&gt;
&lt;p&gt;&amp;nbsp;
&lt;em&gt;-ous&lt;/em&gt; = adjective&amp;nbsp;suffix&lt;/p&gt;
&lt;p&gt;(suffix = thing you add onto the end of a word to make a new word.)
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;The only reason that domain-specific words (and often, colloquially, &amp;#8220;big&amp;#8221; words) (yes, I used a five-syllable word in an aside about big words. I can&amp;#8217;t help myself. It means &amp;#8220;informal&amp;#8221;, sort of synonymous with &amp;#8220;the vernacular&amp;#8221;) seem scary is because they&amp;#8217;re &lt;em&gt;new&lt;/em&gt;! They look and sound like our language, yet we don&amp;#8217;t have any meaning to assign them. It&amp;#8217;s like having a label that doesn&amp;#8217;t refer to anything. Imagine someone kept talking about &amp;#8220;Anna&amp;#8221;, but you didn&amp;#8217;t know who Anna was, anything about her life, or what she did, or what she looked like. You wouldn&amp;#8217;t really have much to contribute to the discussion about Anna per se&amp;mdash;but you might ask those things as questions.  It&amp;#8217;s like when you go to a new restaurant with dishes you&amp;#8217;ve never heard of or tried before on the menu. Sometimes all it takes is a peek behind the curtain, so to speak, to get a sense of what  kind of food the label refers to. It is fairly intuitive that when you go to, say, a Mexican restaurant, you might learn that &amp;#8220;pollo&amp;#8221; means chicken. If you only spoke English going into the restaurant, now you have two entries&amp;mdash;i.e., labels, i.e., {&amp;#8220;chicken&amp;#8221;, &amp;#8220;pollo&amp;#8221;}&amp;mdash;in your mind for the food-concept that is chicken. What about the other way around? What does the word chicken &lt;em&gt;mean&lt;/em&gt;? That is, what concept does the entry &amp;#8220;chicken&amp;#8221; correspond to? Does it only have one meaning? Let&amp;#8217;s think about this. If you were reading a children&amp;#8217;s book about a farm, what does &amp;#8220;chicken&amp;#8221; evoke? What about at a restaurant? What about with your friends before a swim in the lake on a cold morning? Though we might be unaware of it, we already have many words in our lexicon&amp;mdash;our &amp;#8220;mental dictionary&amp;#8221;&amp;mdash;that have multiple different meanings. Same label, different stuff. How and when we use these words, and each of their meanings, depends largely (if not entirely) on the context. Now think back to each of the places and domains I talked about at the beginning&amp;mdash;not only do different domains have different &lt;em&gt;new&lt;/em&gt; words, they also have words that look and sound familiar, but carry an either somewhat or entirely different&amp;nbsp;meaning.&lt;/p&gt;
&lt;p&gt;So to conclude, for now, this yet unfinished thought: one mustn&amp;#8217;t fear. Just remember everything is language and you&amp;#8217;ll be&amp;nbsp;fine.&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; the example language for the current purposes, both for simplification (i.e., to avoid having to say &amp;#8220;language&amp;#8221; or &amp;#8220;any language&amp;#8221; at every turn) and to make clear that this &amp;#8220;language&amp;#8221; of which I wish to speak (at least where you now see &amp;#8220;English&amp;#8221; in the above text) unambiguously points to [a] human natural language, and not language as in phrasing or stylistic considerations or verbiage. All that to say, one could easily insert any other natural language (e.g., Hungarian, Inuktitut, Japanese, Pirahã) and the same principle holds. (The question of &lt;em&gt;why&lt;/em&gt; this is is subject matter for another story time&amp;#8230;)
 O blessed footnote, how unironically recursive thou&amp;nbsp;art&lt;/p&gt;</content><category term="musings"></category></entry><entry><title>A brief reflection on language and cultural norms + values</title><link href="https://megankarabin.github.io/cyberlingual/language-culture.html" rel="alternate"></link><published>2021-02-05T00:00:00-05:00</published><updated>2021-02-05T00:00:00-05:00</updated><author><name>Megan Karabin</name></author><id>tag:megankarabin.github.io,2021-02-05:/cyberlingual/language-culture.html</id><summary type="html">&lt;p&gt;It is interesting how much of our language is shaped by cultural mores and social institutions. &amp;#8220;Social institutions&amp;#8221; though, are of course made up of individuals, who each and together hold cultural values and personal&amp;nbsp;biases.&lt;/p&gt;
&lt;p&gt;The now-productive English prefix &lt;em&gt;andro-&lt;/em&gt; was borrowed from the Greek &lt;em&gt;andr-&lt;/em&gt; meaning &amp;#8220;man&amp;#8221; or …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It is interesting how much of our language is shaped by cultural mores and social institutions. &amp;#8220;Social institutions&amp;#8221; though, are of course made up of individuals, who each and together hold cultural values and personal&amp;nbsp;biases.&lt;/p&gt;
&lt;p&gt;The now-productive English prefix &lt;em&gt;andro-&lt;/em&gt; was borrowed from the Greek &lt;em&gt;andr-&lt;/em&gt; meaning &amp;#8220;man&amp;#8221; or &amp;#8220;male&amp;#8221;. We see this form all over&amp;mdash;from android (literally, &amp;#8220;man-like&amp;#8221;) to andragogy (the study of adult learning; contrasted with pedagogy&lt;sup&gt;1&lt;/sup&gt;) to androgen (the so-called &amp;#8220;male&amp;#8221; sex hormone&amp;mdash;so-called in that people of both sexes produce and require androgens, just as people of both sexes produce and require estrogen). The feminine counterpart to &lt;em&gt;andr-&lt;/em&gt;, in Greek, is &lt;em&gt;gune-&lt;/em&gt;, whose English form is recognizable as &lt;em&gt;gynaeco-&lt;/em&gt;, defined as &amp;#8220;relating to women;&amp;nbsp;female&amp;#8221;.&lt;/p&gt;
&lt;!-- {Looking at these combining forms in corpora - how does the productivity (derivational family; proportion of new/obscure uses) of each compare?} --&gt;

&lt;p&gt;It&amp;#8217;s interesting how German educator &lt;a href="https://en.wikipedia.org/wiki/Alexander_Kapp_(German_educator_and_editor)"&gt;Alexander Kapp&lt;/a&gt; (1799-1869), in creating a new term for his philosophy of adult education (andragogy), chose to use the Greek form for man (and it doesn&amp;#8217;t mean &amp;#8220;man&amp;#8221; as in the dated synonym for &amp;#8220;human&amp;#8221;, it relates specifically to a &amp;#8220;masculine&amp;#8221;, or male, quality)&lt;sup&gt;2&lt;/sup&gt;. Developed in the first half of the 19th century, it is easy to see why this choice made sense, at the time. A reflection, indeed, of the fact that at that time, women were excluded from most of higher education (among other domains). But interesting, still, that the etymology of the term gives us hints as to the cultural state of affairs at its&amp;nbsp;inception.&lt;/p&gt;
&lt;p&gt;With the increasing prevalence of women&amp;#8217;s participation in society in all spheres, at all levels, language use has adapted: much more frequent are the more accurate &amp;#8220;humankind&amp;#8221; and &amp;#8220;salesperson&amp;#8221; and &amp;#8220;chair of the board&amp;#8221;. The question of causation vs. correlation aside, this is rather&amp;nbsp;cool.&lt;/p&gt;
&lt;p&gt;Also interesting is how &lt;em&gt;gynaeco-&lt;/em&gt; in its widest-used combined form is gynecology, the branch of medicine dealing with women&amp;#8217;s reproductive health. Of note on a personal level: I was already comfortably familiar with &lt;em&gt;andro-&lt;/em&gt; as the combining form for &amp;#8220;man/male&amp;#8221;, but until closer inspection had assumed &lt;em&gt;gynaeco&lt;/em&gt; referred to some aspect of the female reproductive system, rather than simply being the counterpart, if you will, of &lt;em&gt;andro-&lt;/em&gt;. If andragogy and its roots give us any clues, we might consider looking at gynecology through a similar lens. Why is it that this term has as its literal meaning (constructed by combining its constituent parts, &lt;em&gt;gynaeco-&lt;/em&gt; + &lt;em&gt;ology&lt;/em&gt;) &amp;#8220;the study of women&amp;#8221;, but this medical discipline is focused on the reproductive system? Of course, there is also andrology, which deals with conditions and diseases specific to men. However, it &lt;em&gt;is&lt;/em&gt; the case that the medical model itself&amp;mdash; at the level of the institution, not just the discipline&amp;mdash;is biased toward the male body as the standard, or the baseline, and the female body as a variation, as such&amp;mdash;a proportionately smaller version of the standard. While this is very much not the case, it doesn&amp;#8217;t change the fact that, for example, car manufacturers still use anatomically male crash dummies, and women are at a greater risk of serious injury and death because seatbelts haven&amp;#8217;t been tested on female-proportioned dummy-subjects&lt;sup&gt;3&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;So, a question that arises is: how might the differential usage of such terms reflect conceptual filaments, or substrates, within a culture or a society? How might an androcentric lens (largely the result of few alternate and equally influential perspectives in academic and social disciplines) have shaped some of this vocabulary, and what does it mean for us now? From words (&amp;#8220;hysteria&amp;#8221;) to idioms (&amp;#8220;grow a pair/have the balls&amp;#8221;), the language we use is directly influenced by culture&amp;mdash;whether aligned with current norms and values or vestigal clues to past&amp;nbsp;worldviews.&lt;/p&gt;
&lt;p&gt;meaning is not the sum of its&amp;nbsp;parts&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; pedagogy is the more general term, referring to &amp;#8220;the method and practice of teaching&amp;#8221; (cited from Merriam-Webster English dictionary). Andragogy is essentially similar, but specifies teaching in the context of adult&amp;nbsp;learners.  &lt;/p&gt;
&lt;p&gt;&lt;sup&gt;2&lt;/sup&gt; A fairly random and context-less example; I came across this figure+term while reading an article about communication, and it spurred these thoughts. Will try to find it again and link it&amp;nbsp;here. &lt;/p&gt;
&lt;p&gt;&lt;sup&gt;3&lt;/sup&gt; &lt;a href="https://www.amazon.ca/Invisible-Women-Data-World-Designed/dp/1419735217/ref=sr_1_1?dchild=1&amp;amp;keywords=invisible+women&amp;amp;qid=1621038394&amp;amp;sr=8-1"&gt;Caroline Criado Perez, Invisible Women&amp;nbsp;(2019)&lt;/a&gt;&lt;/p&gt;</content><category term="musings"></category></entry><entry><title>Advanced Jinja: filters &amp; variables</title><link href="https://megankarabin.github.io/cyberlingual/advanced-jinja.html" rel="alternate"></link><published>2019-08-06T13:43:00-04:00</published><updated>2019-08-06T13:43:00-04:00</updated><author><name>Megan Karabin</name></author><id>tag:megankarabin.github.io,2019-08-06:/cyberlingual/advanced-jinja.html</id><summary type="html">&lt;p&gt;&lt;img src="images\jinja_logo.png" alt="Drawing" style="width: 500px;"/&gt;
&lt;em&gt;&lt;a href="https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/Jinja_software_logo.svg/1200px-Jinja_software_logo.svg.png"&gt;Image&amp;nbsp;source&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Want to learn how to be a Jinja ninja? (Since discovering Jinja I&amp;#8217;ve wanted to use those words together in a sentence and this seemed like the perfect&amp;nbsp;opportunity.)&lt;/p&gt;
&lt;p&gt;The current post explains how you can use Jinja filters to access python functions and libraries from within …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="images\jinja_logo.png" alt="Drawing" style="width: 500px;"/&gt;
&lt;em&gt;&lt;a href="https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/Jinja_software_logo.svg/1200px-Jinja_software_logo.svg.png"&gt;Image&amp;nbsp;source&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Want to learn how to be a Jinja ninja? (Since discovering Jinja I&amp;#8217;ve wanted to use those words together in a sentence and this seemed like the perfect&amp;nbsp;opportunity.)&lt;/p&gt;
&lt;p&gt;The current post explains how you can use Jinja filters to access python functions and libraries from within an html doc, and how to create new variables from &lt;em&gt;within&lt;/em&gt; your Jinja template (rather than from the python script linked to the&amp;nbsp;template).&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll be assuming basic familiarity with Jinja, so if you need to brush up on the basics first, check out my friend Vishal&amp;#8217;s &lt;a href="https://vishalsharma01.github.io/Blog/blog-3.html"&gt;introductory Jinja2 blog post&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Table of&amp;nbsp;contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#jinja"&gt;Recap: What is&amp;nbsp;Jinja?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#install"&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#temp_load"&gt;Loading data with template&amp;nbsp;loader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#filters"&gt;Filters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#functions"&gt;Custom&amp;nbsp;functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vars"&gt;Setting&amp;nbsp;variables&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Recap: What is Jinja?&lt;a name='jinja'&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Jinja is a python library and a &lt;strong&gt;template engine&lt;/strong&gt;, which is a software designed to let you produce a text output from your code. Of course, in python, we could just do that using &lt;code&gt;print('your text output')&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What&amp;#8217;s special about a template engine and why might I need&amp;nbsp;one?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Jinja enables your code to communicate with a template, like an &lt;span class="caps"&gt;HTML&lt;/span&gt; document, which traditionally only allows for static inputs and outputs. &lt;span class="caps"&gt;HTML&lt;/span&gt; doesn&amp;#8217;t have an ability to use control flow, or encode mutable variables, for instance. There are many template engines out there, but Jinja is built specifically to interact with python. Using Jinja, you can use python programming within an &lt;span class="caps"&gt;HTML&lt;/span&gt; document such that our outputs are dynamic and consistent with any document-external data you&amp;#8217;re using in your web&amp;nbsp;application.&lt;/p&gt;
&lt;h3&gt;Installation&lt;a name='install'&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you haven&amp;#8217;t already done so, you can install Jinja by running either of the following&amp;nbsp;commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;easy_install Jinja2
pip install Jinja2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If neither of these work and you&amp;#8217;re having trouble installing, check out the documentation &lt;a href="http://jinja.pocoo.org/docs/2.10/intro/#installation"&gt;here&lt;/a&gt; for more detailed&amp;nbsp;instructions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;jinja2&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;jinja2&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FileSystemLoader&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;IPython.core.display&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HTML&lt;/span&gt;

&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pathlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;j-templates/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parents&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exist_ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Template loader &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Environment&lt;a name='temp_load'&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;file_loader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FileSystemLoader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;j-templates&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c1"&gt;# loads files from a specified directory (the so-called &amp;quot;file system&amp;quot; -- here, the one&lt;/span&gt;
            &lt;span class="c1"&gt;# we&amp;#39;ve just created, &amp;#39;j-templates&amp;#39;)&lt;/span&gt;

&lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;file_loader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="c1"&gt;# the &amp;quot;loader&amp;quot; argument sets the template loader for this environment.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;strong&gt;template loader&lt;/strong&gt; is the file system (i.e., directory) from which you&amp;#8217;ll be accessing files/templates. It&amp;#8217;s helpful to do this when you&amp;#8217;ll be spinning up toy files to practice on or use for&amp;nbsp;demonstration.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;template class &amp;#8220;&lt;code&gt;Environment&lt;/code&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;&lt;/strong&gt; is the core component of Jinja. Instances of it are used to store global variables and load templates, but generally you won&amp;#8217;t need to configure custom instances of it when you&amp;#8217;re using Jinja in an application &amp;mdash; most instantiate just once (automatically) upon initializing the&amp;nbsp;application.&lt;/p&gt;
&lt;p&gt;The examples use a pokemon dataset, so here I&amp;#8217;m just reading that&amp;nbsp;in.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hackathon/data/pokemon.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;pokemon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Filters&lt;a name='filters'&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Filters are an incredibly helpful feature baked into Jinja &amp;ndash; &lt;strong&gt;they allow you to use any desired python functions (including ones you&amp;#8217;ve written), libraries and/or modules along with their associated&amp;nbsp;methods.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Below, I want to get a randomly generated pokemon from my list of pokemon, and for that I&amp;#8217;ll need &lt;code&gt;np.random.choice&lt;/code&gt;. I am &lt;strong&gt;not&lt;/strong&gt; able to simply use code that looks like the following code&amp;nbsp;block:&lt;/p&gt;
&lt;p&gt;&lt;img src='https://i.imgur.com/ySrLNu6.png' width=350px;&gt;&lt;/p&gt;
&lt;p&gt;The above code is invalid and won&amp;#8217;t run. This is where the magic of Jinja2 comes in: &lt;strong&gt;Jinja can access libraries through&amp;nbsp;filters.&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;env.filters&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The filters for an environment can be viewed by calling the dot filters (&lt;code&gt;.filters&lt;/code&gt;) method, which will provide you with a dictionary whose keys are the filters (their names) and whose values are the particular object they&amp;nbsp;house.&lt;/p&gt;
&lt;p&gt;By creating your own filter as a key-value pair, you can use virtually any Python function or library via Jinja! Below I&amp;#8217;m setting a new key called &lt;code&gt;"select_random"&lt;/code&gt; containing the random choice&amp;nbsp;function.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Make sure to import the necessary libraries, modules and/or functions beforehand and create any aliases you want to use &amp;mdash; e.g., I imported numpy as np&amp;nbsp;earlier.&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;select_random&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, as shown in the following code output, the new &lt;code&gt;select_random&lt;/code&gt; key has been added to the dictionary (at the very&amp;nbsp;bottom).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# this will tell us how many actual keys there are&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;54
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# indexing the last 10 to demonstrate what the&lt;/span&gt;
&lt;span class="c1"&gt;# dictionary looks like without having 50+ key-value pairs&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;:]:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;{i}&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt; :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;#39;striptags&amp;#39; : &amp;lt;function do_striptags at 0x115287730&amp;gt;
&amp;#39;sum&amp;#39; : &amp;lt;function do_sum at 0x1155909d8&amp;gt;
&amp;#39;title&amp;#39; : &amp;lt;function do_title at 0x1152999d8&amp;gt;
&amp;#39;trim&amp;#39; : &amp;lt;function do_trim at 0x1152876a8&amp;gt;
&amp;#39;truncate&amp;#39; : &amp;lt;function do_truncate at 0x115287378&amp;gt;
&amp;#39;unique&amp;#39; : &amp;lt;function do_unique at 0x115299b70&amp;gt;
&amp;#39;upper&amp;#39; : &amp;lt;function do_upper at 0x1152997b8&amp;gt;
&amp;#39;urlencode&amp;#39; : &amp;lt;function do_urlencode at 0x1152996a8&amp;gt;
&amp;#39;urlize&amp;#39; : &amp;lt;function do_urlize at 0x115287268&amp;gt;
&amp;#39;wordcount&amp;#39; : &amp;lt;function do_wordcount at 0x115287488&amp;gt;
&amp;#39;wordwrap&amp;#39; : &amp;lt;function do_wordwrap at 0x115287400&amp;gt;
&amp;#39;xmlattr&amp;#39; : &amp;lt;function do_xmlattr at 0x1152998c8&amp;gt;
&amp;#39;tojson&amp;#39; : &amp;lt;function do_tojson at 0x11529b2f0&amp;gt;
&amp;#39;select_random&amp;#39; : &amp;lt;built-in method choice of mtrand.RandomState object at 0x106cd57e0&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, in Jinja, you can call the function that this filter contains. The way this is done is quite simple, though slightly different from how we&amp;#8217;re used to calling functions with typical python syntax. For a function in python that looks like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;function(arg)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;here&amp;#8217;s how it&amp;#8217;s formulated in&amp;nbsp;Jinja:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See the example below using the newly created &lt;code&gt;select_random&lt;/code&gt; filter.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="n"&gt;writefile&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;templates&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;DOCTYPE&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="n"&gt;pokemon&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="n"&gt;randomly&lt;/span&gt; &lt;span class="n"&gt;selected&lt;/span&gt; &lt;span class="n"&gt;pokémon&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;my_pokemon&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;select_random&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Overwriting j-templates/fun.html
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fun.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# making a jinja template for the file we created in the above codeblock&lt;/span&gt;

&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_pokemon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pokemon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# assigning our pokemon variable (and all of its contents) to a jinja template variable, which we&amp;#39;re calling &amp;#39;my_pokemon&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;HTML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;title&gt;My pokemon&lt;/title&gt;
&lt;/head&gt;

&lt;p&gt;&lt;p&gt;My randomly selected pokémon :&amp;nbsp;Starmie &lt;/p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/html&gt;&lt;/p&gt;
&lt;p&gt;To break down what&amp;#8217;s happening&amp;nbsp;here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;env.get_template()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Calling this method on our environment will load whatever we input (i.e., the desired file) as a Jinja template.
This is how we &amp;#8220;tell&amp;#8221; Jinja that this is the file we want to use. We&amp;#8217;re then throwing the result into a variable called &lt;code&gt;template&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;template.render
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Performing the previous step sets up the file as a Jinja template, which then means we can use the &lt;code&gt;.render&lt;/code&gt; method on it. The arguments passed to &lt;code&gt;template.render&lt;/code&gt; are the names of all variables to be used in the script.
This step is crucial to ensuring that the template can communicate with/access variables in our python&amp;nbsp;script.&lt;/p&gt;
&lt;h2&gt;Custom functions&lt;a name='functions'&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The beauty of filters is that we can write any function in python and &amp;#8220;import&amp;#8221; it into jinja this&amp;nbsp;way.&lt;/p&gt;
&lt;p&gt;Building on top of the last example, where we built in the random generator, let&amp;#8217;s say that I only like fire pokemon, and want to print &amp;#8220;good&amp;#8221; every time the randomly selected pokemon is a fire type and &amp;#8220;bad&amp;#8221; for every one &lt;em&gt;not&lt;/em&gt; of type fire, along with their actual type. I can write a quick function to do this and then use a filter to bring it into&amp;nbsp;Jinja.&lt;/p&gt;
&lt;p&gt;Note that because we want to reuse the randomly generated pokemon, we&amp;#8217;ll have to use a variable (Jinja&amp;#8217;s syntax isn&amp;#8217;t as flexible as python&amp;#8217;s and doesn&amp;#8217;t allow for infinite nesting using brackets). This is made fairly simple using Jinja&amp;#8217;s &lt;code&gt;{% set x = y %}&lt;/code&gt; syntax.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_fire_pokemon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pokemon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Charmander&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;poketype_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;pokemon&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;type_1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_list&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;poketype_1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Fire&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{pokemon}, Good&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{pokemon}, Bad: {poketype_1}&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;is_fire_pokemon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Rattata&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;#39;Rattata, Bad: Normal&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now that we have our custom function, let&amp;#8217;s make a filter for&amp;nbsp;it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;is_fire&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;is_fire_pokemon&lt;/span&gt;

&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;is_fire&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;function __main__.is_fire_pokemon(pokemon=&amp;#39;Charmander&amp;#39;)&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Note on calling a function vs. the function&amp;nbsp;object:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Notice that we don&amp;#8217;t write &lt;code&gt;is_fire_pokemon(pokemon)&lt;/code&gt;&amp;mdash; instead, input the function as its name on its own, &lt;strong&gt;without&lt;/strong&gt; brackets. You don&amp;#8217;t want to call the function at this point, because the the function&amp;#8217;s output would get stored as the value of the key we&amp;#8217;re setting. Rather, you want to provide a reference to the function&amp;nbsp;object.&lt;/p&gt;
&lt;p&gt;Take a look at the difference in what&amp;#8217;s being stored when we set &lt;code&gt;env.filters['is_fire'] = is_fire_pokemon&lt;/code&gt; versus &lt;code&gt;is_fire_pokemon(pokemon)&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;is_fire&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;is_fire_pokemon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pokemon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;is_fire&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Charmander, Good
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;is_fire&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;is_fire_pokemon&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;is_fire&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;function is_fire_pokemon at 0x114e422f0&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the first case, what&amp;#8217;s being stored as the filter is the value returned by the function &amp;ndash; essentially, you&amp;#8217;re calling the function &lt;em&gt;as&lt;/em&gt; it&amp;#8217;s being stored, and in doing so, saving whatever it returns as the filter, which isn&amp;#8217;t what you want.  It&amp;#8217;s the function object itself that must be set as a filter, and this is done by omitting brackets and&amp;nbsp;arguments.&lt;/p&gt;
&lt;h2&gt;Setting variables&lt;a name='vars'&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that we&amp;#8217;re familiar with the calling of functions in Jinja through filters, we can add another layer:&amp;nbsp;variables.&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;ve made it this far, I probably don&amp;#8217;t need to elaborate on the usefulness of local variables, so let&amp;#8217;s dive right into the&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;The instantiation process is quite straightforward: identical to how one assigns variables in regular python, with the one added step of wrapping your variable assignment&amp;nbsp;inside&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% var = goes here %}
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="n"&gt;writefile&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;templates&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fun2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;DOCTYPE&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="n"&gt;pokemon&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="n"&gt;randomly&lt;/span&gt; &lt;span class="n"&gt;selected&lt;/span&gt; &lt;span class="n"&gt;pokémon&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;my_pokemon&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;select_random&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;is_fire&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Overwriting j-templates/fun2.html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here I&amp;#8217;ve set &lt;code&gt;p = my_pokemon|select_random&lt;/code&gt; in order to pass it to my &lt;code&gt;is_fire_pokemon&lt;/code&gt; function (which is contained in the &lt;code&gt;is_fire&lt;/code&gt; filter).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fun2.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_pokemon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pokemon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;HTML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;title&gt;My pokemon&lt;/title&gt;
&lt;/head&gt;

&lt;p&gt;&lt;p&gt;My randomly selected pokémon&amp;nbsp;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    Cubone, Bad: Ground
&amp;lt;/p&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;/html&gt;&lt;/p&gt;
&lt;!-- &lt;img src='https://vignette.wikia.nocookie.net/looneytunes/images/e/e1/All.jpg/revision/latest?cb=20150313020828' style='width:500px;'&gt; --&gt;

&lt;h2&gt;Good luck on your Jinja adventures&amp;nbsp;:-)&lt;/h2&gt;</content><category term="python"></category><category term="Jinja2"></category></entry><entry><title>Intro to spaCy</title><link href="https://megankarabin.github.io/cyberlingual/intro-to-spacy.html" rel="alternate"></link><published>2019-07-28T15:46:00-04:00</published><updated>2020-07-06T00:00:00-04:00</updated><author><name>Megan Karabin</name></author><id>tag:megankarabin.github.io,2019-07-28:/cyberlingual/intro-to-spacy.html</id><summary type="html">&lt;p&gt;&lt;img src="images\nlp.png" alt="Drawing" style="width: 500px;"/&gt;
&lt;em&gt;&lt;a href="https://lh3.googleusercontent.com/Os6W2e25wv-BwJHgRZlheKbEzm_OvJzKY_PgaehWBrIdLmc9gzl1Kn8JcvOo7huHRpUUXijvTyKAv8NOyCBZURc0Nfao3w=s600"&gt;Image&amp;nbsp;source&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;!-- *[Image source](https://www.wordfrequency.info/images/words.jpg)* --&gt;

&lt;p&gt;spaCy is a tool for natural language processing (&lt;span class="caps"&gt;NLP&lt;/span&gt;). It&amp;#8217;s incredibly user-friendly and has several unique, useful&amp;nbsp;features.&lt;/p&gt;
&lt;p&gt;This tutorial covers the basics of spaCy, showing you how to install and get started, and then helping you to become familiar with some of the core concepts and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="images\nlp.png" alt="Drawing" style="width: 500px;"/&gt;
&lt;em&gt;&lt;a href="https://lh3.googleusercontent.com/Os6W2e25wv-BwJHgRZlheKbEzm_OvJzKY_PgaehWBrIdLmc9gzl1Kn8JcvOo7huHRpUUXijvTyKAv8NOyCBZURc0Nfao3w=s600"&gt;Image&amp;nbsp;source&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;!-- *[Image source](https://www.wordfrequency.info/images/words.jpg)* --&gt;

&lt;p&gt;spaCy is a tool for natural language processing (&lt;span class="caps"&gt;NLP&lt;/span&gt;). It&amp;#8217;s incredibly user-friendly and has several unique, useful&amp;nbsp;features.&lt;/p&gt;
&lt;p&gt;This tutorial covers the basics of spaCy, showing you how to install and get started, and then helping you to become familiar with some of the core concepts and features built into spaCy. It also introduces displaCy, spaCy&amp;#8217;s viz package. With displaCy, we can view the syntactic dependencies of a doc (text object) in really pretty visualizations, as well as label and colour-code&amp;nbsp;entities.&lt;/p&gt;
&lt;h2&gt;Table of&amp;nbsp;Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#install"&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#objects"&gt;&lt;span class="caps"&gt;NLP&lt;/span&gt; and Doc&amp;nbsp;objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tokens"&gt;Tokens&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#lex_atr"&gt;Lexical&amp;nbsp;attributes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#add_atr"&gt;Additional&amp;nbsp;attributes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#matcher"&gt;Match patterns&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#matcher_overview"&gt;Matcher:&amp;nbsp;Overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#hashing"&gt;Hashing, string stores and&amp;nbsp;vocab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#id"&gt;Entity&amp;nbsp;identification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#displacy"&gt;displaCy&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#custom"&gt;Customization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#spacy_explain"&gt;&lt;code&gt;spacy.explain&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;altair&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;alt&lt;/span&gt;

&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt; &lt;span class="n"&gt;inline&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="n"&gt;InlineBackend&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure_format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;retina&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Installing and downloading&lt;a name='install'&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To install spaCy, simply run the following lines of&amp;nbsp;code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;spacy&lt;/span&gt;
&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;spacy&lt;/span&gt; &lt;span class="n"&gt;download&lt;/span&gt; &lt;span class="n"&gt;en_core_web_sm&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should get the following&amp;nbsp;output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;✔ Download and installation successful
You can now load the model via spacy.load(&amp;#39;en_core_web_sm&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;The &lt;span class="caps"&gt;NLP&lt;/span&gt; object and the Doc object &lt;a name='objects'&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;span class="caps"&gt;NLP&lt;/span&gt; object contains the processing pipeline. Once instantiated, it can be used to analyze&amp;nbsp;text.&lt;/p&gt;
&lt;p&gt;It is instantiated as&amp;nbsp;follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;spacy.lang.en&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;English&lt;/span&gt;

&lt;span class="n"&gt;nlp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;English&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, we pass our text data to the nlp object, and assign this to a variable, the standard name is &lt;code&gt;doc&lt;/code&gt;. This &lt;code&gt;doc&lt;/code&gt; variable now contains a Doc object, which we&amp;#8217;ll see&amp;nbsp;below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nlp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;The alien spaceship travelled 12 billion light years to explore new galaxies.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;The alien spaceship travelled 12 billion light years to explore new galaxies.
&amp;lt;class &amp;#39;spacy.tokens.doc.Doc&amp;#39;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It behaves the same as a python sequence in that you can iterate over and index its contents.
[Note: for the sake of being explicit I passed a raw string to &lt;code&gt;nlp&lt;/code&gt;, but you can just as easily pass a variable that contains your&amp;nbsp;text.]&lt;/p&gt;
&lt;p&gt;We can run the &lt;code&gt;.text&lt;/code&gt; method to get the full text contents of the doc&amp;nbsp;object.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;#39;The alien spaceship travelled 12 billion light years to explore new galaxies.&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;spaCy uses statistical models to make predictions based on context, which is critically important when processing language. Without context analysis, there&amp;#8217;s very little we can say about the words in a given sentence or phrase &amp;mdash; a feature of key importance of language is that words which look identical don&amp;#8217;t always mean the same thing or have the same structural role, depending on where they occur in a sentence and with which other words. (E.g., &amp;#8220;She ate &lt;strong&gt;baked&lt;/strong&gt; potatoes&amp;#8221; vs. &amp;#8220;She &lt;strong&gt;baked&lt;/strong&gt; potatoes&amp;#8221;: in the first sentence, baked is an adjective, but in the second, it&amp;#8217;s a&amp;nbsp;verb.)&lt;/p&gt;
&lt;p&gt;Things we can do in spaCy with statistical&amp;nbsp;models:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;parts-of-speech (&lt;span class="caps"&gt;POS&lt;/span&gt;)&amp;nbsp;tagging&lt;/li&gt;
&lt;li&gt;(named) entity&amp;nbsp;identification&lt;/li&gt;
&lt;li&gt;syntactic dependency&amp;nbsp;parsing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To use one of spaCy&amp;#8217;s models, you&amp;#8217;ll need to import spacy, then load a package, such as the &lt;code&gt;en_core_web_sm&lt;/code&gt; package.&lt;/p&gt;
&lt;p&gt;You can&amp;nbsp;use:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ python install -m spacy download en_core_web_sm&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;spacy&lt;/span&gt;

&lt;span class="c1"&gt;# now we&amp;#39;ll simply reinstantiate&lt;/span&gt;
&lt;span class="n"&gt;nlp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;spacy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;en_core_web_sm&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# still using our old inputs :P&lt;/span&gt;
&lt;span class="n"&gt;doc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nlp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;The SpaceX spaceship travelled 12 billion light years to explore new galaxies.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Tokens&lt;a name='tokens'&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Tokens are just another word for &amp;#8220;item&amp;#8221;. In &lt;span class="caps"&gt;NLP&lt;/span&gt;, any individual, discrete object within the text (e.g., a word, punctuation mark, or number) would be a token. We can access individual tokens in a text by iterating over the doc object, and can thus see what types of tokens it contains, along with their lexical&amp;nbsp;attributes.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Lexical just means &amp;#8220;relating to the words or vocabulary of a language&amp;#8221;, and so a &amp;#8220;lexical attribute&amp;#8221; is just some feature relating to the words/vocabulary of your&amp;nbsp;doc.&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;The
SpaceX
spaceship
travelled
12
billion
light
years
to
explore
new
galaxies
.
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Lexical Attributes in spaCy&lt;a name='lex_atr'&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h5&gt;Linguistics&amp;nbsp;refresher:&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;POS&lt;/span&gt;&lt;/strong&gt;: the syntactic category a word (or here, token) belongs to, e.g., noun, verb,&amp;nbsp;adjective&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dependency&lt;/strong&gt;: the grammatical role of a word, relative to the other words in the sentence, e.g. direct/indirect&amp;nbsp;object&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Head&lt;/strong&gt;: the lexical node (on a tree) that governs the word in&amp;nbsp;question&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lemma&lt;/strong&gt;: the base form of a word (its simplest morphological realization), e.g. &amp;#8220;run&amp;#8221; is the lemma for&amp;nbsp;&amp;#8220;running&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Shape&lt;/strong&gt;: not linguistics-related per se, but this one is actually pretty cool &amp;mdash; the shape attribute shows you what the token &amp;#8220;looks like&amp;#8221; without showing you the token itself (is it a digit, does it contain capital letters,&amp;nbsp;etc.).&lt;/p&gt;
&lt;p&gt;The following are some useful and interesting token&amp;nbsp;attributes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;These return boolean&amp;nbsp;values:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;is_alpha  (is it an alphanumeric character)
is_punct  (is it punctuation)
like_num  (is it a number)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;These return the index, the &lt;span class="caps"&gt;POS&lt;/span&gt;, the dependency, the lemma and the shape of a token,&amp;nbsp;respectively:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;i
pos_
dep_
head
lemma_
shape_
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Additional Attributes&lt;a name='add_atr'&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;We can call &lt;code&gt;doc.ents&lt;/code&gt; to get the entities and iterate over this to find the label (i.e., the category) for each entity (which we&amp;#8217;ll do in a minute) using the &lt;code&gt;label_&lt;/code&gt; attribute.&lt;/p&gt;
&lt;p&gt;Below I&amp;#8217;ll run each of the attributes for every token using list comprehensions and toss those outputs into a dataframe, which will now contain all the relevant lexical information we gathered for each of the&amp;nbsp;tokens.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos_&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;dep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dep_&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;heads&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;lemmas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lemma_&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;shapes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape_&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;token&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;pos&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;dependency&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dep&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;head&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;heads&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;lemma&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;lemmas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;shape&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;shapes&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;


&lt;span class="n"&gt;df&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;token&lt;/th&gt;
      &lt;th&gt;pos&lt;/th&gt;
      &lt;th&gt;dependency&lt;/th&gt;
      &lt;th&gt;head&lt;/th&gt;
      &lt;th&gt;lemma&lt;/th&gt;
      &lt;th&gt;shape&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;The&lt;/td&gt;
      &lt;td&gt;&lt;span class="caps"&gt;DET&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;det&lt;/td&gt;
      &lt;td&gt;spaceship&lt;/td&gt;
      &lt;td&gt;the&lt;/td&gt;
      &lt;td&gt;Xxx&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;SpaceX&lt;/td&gt;
      &lt;td&gt;&lt;span class="caps"&gt;PROPN&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;compound&lt;/td&gt;
      &lt;td&gt;spaceship&lt;/td&gt;
      &lt;td&gt;SpaceX&lt;/td&gt;
      &lt;td&gt;XxxxxX&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;spaceship&lt;/td&gt;
      &lt;td&gt;&lt;span class="caps"&gt;NOUN&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;nsubj&lt;/td&gt;
      &lt;td&gt;travelled&lt;/td&gt;
      &lt;td&gt;spaceship&lt;/td&gt;
      &lt;td&gt;xxxx&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;travelled&lt;/td&gt;
      &lt;td&gt;&lt;span class="caps"&gt;VERB&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;&lt;span class="caps"&gt;ROOT&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;travelled&lt;/td&gt;
      &lt;td&gt;travel&lt;/td&gt;
      &lt;td&gt;xxxx&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;&lt;span class="caps"&gt;NUM&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;compound&lt;/td&gt;
      &lt;td&gt;billion&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;dd&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;billion&lt;/td&gt;
      &lt;td&gt;&lt;span class="caps"&gt;NUM&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;nummod&lt;/td&gt;
      &lt;td&gt;years&lt;/td&gt;
      &lt;td&gt;billion&lt;/td&gt;
      &lt;td&gt;xxxx&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;light&lt;/td&gt;
      &lt;td&gt;&lt;span class="caps"&gt;ADJ&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;amod&lt;/td&gt;
      &lt;td&gt;years&lt;/td&gt;
      &lt;td&gt;light&lt;/td&gt;
      &lt;td&gt;xxxx&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;years&lt;/td&gt;
      &lt;td&gt;&lt;span class="caps"&gt;NOUN&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;dobj&lt;/td&gt;
      &lt;td&gt;travelled&lt;/td&gt;
      &lt;td&gt;year&lt;/td&gt;
      &lt;td&gt;xxxx&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;to&lt;/td&gt;
      &lt;td&gt;&lt;span class="caps"&gt;PART&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;aux&lt;/td&gt;
      &lt;td&gt;explore&lt;/td&gt;
      &lt;td&gt;to&lt;/td&gt;
      &lt;td&gt;xx&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;explore&lt;/td&gt;
      &lt;td&gt;&lt;span class="caps"&gt;VERB&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;advcl&lt;/td&gt;
      &lt;td&gt;travelled&lt;/td&gt;
      &lt;td&gt;explore&lt;/td&gt;
      &lt;td&gt;xxxx&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10&lt;/th&gt;
      &lt;td&gt;new&lt;/td&gt;
      &lt;td&gt;&lt;span class="caps"&gt;ADJ&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;amod&lt;/td&gt;
      &lt;td&gt;galaxies&lt;/td&gt;
      &lt;td&gt;new&lt;/td&gt;
      &lt;td&gt;xxx&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;11&lt;/th&gt;
      &lt;td&gt;galaxies&lt;/td&gt;
      &lt;td&gt;&lt;span class="caps"&gt;NOUN&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;dobj&lt;/td&gt;
      &lt;td&gt;explore&lt;/td&gt;
      &lt;td&gt;galaxy&lt;/td&gt;
      &lt;td&gt;xxxx&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;12&lt;/th&gt;
      &lt;td&gt;.&lt;/td&gt;
      &lt;td&gt;&lt;span class="caps"&gt;PUNCT&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;punct&lt;/td&gt;
      &lt;td&gt;travelled&lt;/td&gt;
      &lt;td&gt;.&lt;/td&gt;
      &lt;td&gt;.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;We can use &lt;code&gt;like_num&lt;/code&gt; to find any numeric tokens in the text. This includes both digits and words for&amp;nbsp;numbers.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;like_num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Token: {token}   Index: {token.i}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;   &lt;span class="n"&gt;Index&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;billion&lt;/span&gt;   &lt;span class="n"&gt;Index&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can check to see if the model recognized SpaceX as an&amp;nbsp;entity&amp;#8230;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ent&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;12 billion light MONEY
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;#8230;Looks like it didn&amp;#8217;t. &amp;#8220;12 billion light&amp;#8221; is also &lt;strong&gt;not&lt;/strong&gt; money&amp;nbsp;here.&lt;/p&gt;
&lt;p&gt;However, all is not lost! We can use a special feature called &lt;strong&gt;match patterns&lt;/strong&gt;, along with manually adding this element to our list of entities, &lt;code&gt;doc.ents&lt;/code&gt; (which we&amp;#8217;ll get to shortly), to set things&amp;nbsp;straight.&lt;/p&gt;
&lt;h2&gt;Match Patterns&lt;a name='matcher'&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/OlxGPEH.jpg" title="source: imgur.com" style='width:400px;' /&gt;&lt;/p&gt;
&lt;h5&gt;What do they &lt;b&gt;do? &lt;/b&gt;&lt;/h5&gt;
&lt;p&gt;One of the coolest things about spaCy is its built-in ability to let us search for patterns without having to rely on regular expressions. &lt;strong&gt;Match patterns&lt;/strong&gt; (the spaCy regex equivalent) let you search for a pattern within a text, which can be a string, a doc or a token object &amp;mdash; whereas regular expressions can only take string&amp;nbsp;arguments.&lt;/p&gt;
&lt;p&gt;Match patterns also let you customize what &lt;em&gt;kind&lt;/em&gt; of pattern you&amp;#8217;re looking for &amp;mdash; which isn&amp;#8217;t always a simple sequence of characters. When we&amp;#8217;re doing &lt;span class="caps"&gt;NLP&lt;/span&gt; analyses, we might want to look for words belonging to a particular &lt;span class="caps"&gt;POS&lt;/span&gt; category, or words with a particular lemma. For instance, setting the lemma search to &amp;#8220;run&amp;#8221; would return tokens that contain the base form, such as &amp;#8220;running&amp;#8221; or&amp;nbsp;&amp;#8220;runs&amp;#8221;.&lt;/p&gt;
&lt;h5&gt;What do they look&amp;nbsp;like?&lt;/h5&gt;
&lt;p&gt;Match patterns are lists of dictionaries, wherein each key is the attribute and each value is the corresponding value you&amp;#8217;re looking&amp;nbsp;for.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pattern = [{&amp;#39;ATTRIBUTE&amp;#39;: &amp;#39;VALUE&amp;#39;}]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Each dictionary corresponds to exactly one token. If you have more than one dictionary, the list of dictionaries will correspond to a sequence of tokens appearing in that order (if that sequence exists in the&amp;nbsp;doc).&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s say we have a doc containing the string &lt;code&gt;"Hello world!"&lt;/code&gt; as well as &lt;code&gt;"it's nice to say hello"&lt;/code&gt;and we want to find all instances of &lt;code&gt;"hello"&lt;/code&gt; where it&amp;#8217;s followed by a noun, as well as also all instances where it&amp;#8217;s&amp;nbsp;not.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://imgur.com/zYMm9ox.jpg" title="source: imgur.com" style='width:650px;' /&gt;&lt;/p&gt;
&lt;p&gt;We can use the &lt;code&gt;OP&lt;/code&gt; attribute with the &lt;code&gt;*&lt;/code&gt; key to indicate that this token is optional (i.e., &amp;#8220;find this element 0 or more&amp;nbsp;times&amp;#8221;).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;For this particular case, this step is somewhat redundant, but I want to illustrate the optional feature in the simplest way&amp;nbsp;possible.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Some attributes for rule-based&amp;nbsp;matching:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;            return bool:

TEXT        IS_ALPHA     IS_LOWER   
LOWER       IS_ASCII     IS_UPPER   
LENGTH      IS_DIGIT     IS_TITLE      
POS         IS_PUNCT     IS_SPACE
OP          IS_STOP
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;To start using match patterns, run the following lines of&amp;nbsp;code:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;spacy.matcher&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Matcher&lt;/span&gt;

&lt;span class="c1"&gt;# initialize matcher using vocabulary shared with the nlp object&lt;/span&gt;
&lt;span class="n"&gt;matcher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Matcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nlp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vocab&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note: this &lt;a href="https://explosion.ai/demos/matcher"&gt;Matcher Explorer&lt;/a&gt; is a really nice tool for checking and trying out various match patterns &amp;mdash; give it a&amp;nbsp;whirl.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# first we set the pattern&lt;/span&gt;
&lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;TEXT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;SpaceX&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;

&lt;span class="c1"&gt;# then we add the pattern to our matcher&lt;/span&gt;
&lt;span class="n"&gt;matcher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;spacex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# then we pass the text we want to search to the matcher&lt;/span&gt;
&lt;span class="n"&gt;matches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;matcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;matches&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[(1533271143234181118, 1, 2)]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The matcher returns a list of tuples, where the first value is the match &lt;span class="caps"&gt;ID&lt;/span&gt;, the second is the start index, and the third is the end index of the&amp;nbsp;match.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;match_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;matched_span&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matched_span&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SpaceX
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Using Matcher: Overview&lt;a name='matcher_overview'&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Steps:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Import Matcher from &lt;code&gt;spacy.matcher&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Load model (e.g., &lt;code&gt;'en_core_web_sm'&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Create nlp object (if not already previously&amp;nbsp;done)&lt;/li&gt;
&lt;li&gt;Instantiate Matcher with shared vocab (pass in &lt;code&gt;nlp.vocab&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Pass your match pattern to &lt;code&gt;matcher.add&lt;/code&gt;, where:&lt;ul&gt;
&lt;li&gt;argument 1 = a string representing a unique &lt;span class="caps"&gt;ID&lt;/span&gt; of your choosing to identify the&amp;nbsp;pattern&lt;/li&gt;
&lt;li&gt;argument 2 = optional callback (if none, set &lt;code&gt;None&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;argument 3 = list of token desriptions, i.e., the&amp;nbsp;pattern&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Call matcher on the &lt;code&gt;doc&lt;/code&gt; object (or whatever you&amp;#8217;ve called your doc object) and toss this into a variable (here, I&amp;#8217;ve used &lt;code&gt;matches&lt;/code&gt; to keep things&amp;nbsp;simple)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Optional&lt;/strong&gt;: peek at what&amp;#8217;s inside. Remember the returned tuple contains the match &lt;span class="caps"&gt;ID&lt;/span&gt;, and the start and stop indices of the&amp;nbsp;match.&lt;/li&gt;
&lt;li&gt;To return the match(es) as a string (to actually see what they are &amp;mdash; we might not always know what strings our match is going to return!), use a loop to iterate over each item in the tuple, as demonstrated&amp;nbsp;above.   &lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Hashing, vocab and string stores&lt;a name='hashing'&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The way we access the vocabulary in spaCy is through hash IDs and string stores. The vocabulary will depend on which package we passed into &lt;code&gt;spacy.load&lt;/code&gt;, and will contain all the unique tokens within that package /&amp;nbsp;dataset.&lt;/p&gt;
&lt;p&gt;spaCy stores tokens in the vocabulary as hashes, such that every identical token string will have the same hash &lt;span class="caps"&gt;ID&lt;/span&gt; (a unique numeric identifier). Hashes enable memory efficiency since this way, if an identical string occurs multiple times (e.g. the word &amp;#8220;the&amp;#8221;), it only needs to be stored once in the vocabulary (and not multiple times as a&amp;nbsp;string).&lt;/p&gt;
&lt;p&gt;Every hash corresponds to a string token, and every string will have a corresponding hash. You can use either one to look up the other, as long as that string is already in the&amp;nbsp;vocabulary.&lt;/p&gt;
&lt;p&gt;If the word is new to the vocabulary, we must first hash it (as I&amp;#8217;ll show below). We can always get the hash of a word by looking up a string (if it&amp;#8217;s not already there, a new one will be generated), but if the word is new and doesn&amp;#8217;t yet have a hash, we can&amp;#8217;t search from hash &lt;span class="caps"&gt;ID&lt;/span&gt; to string (it won&amp;#8217;t&amp;nbsp;exist!).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# reminder of the contents of our doc object&lt;/span&gt;
&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;#39;The SpaceX spaceship travelled 12 billion light years to explore new galaxies.&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can search for a hash or a string&amp;nbsp;using&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nlp.vocab.strings[&amp;#39;string&amp;#39;]
nlp.vocab.strings[hash]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;span class="caps"&gt;OR&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;doc.vocab.strings[&amp;#39;string&amp;#39;]
doc.vocab.strings[hash]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where &lt;code&gt;'string'&lt;/code&gt; is the string token you&amp;#8217;re searching for (or adding to the vocab) and &lt;code&gt;hash&lt;/code&gt; is an integer representing the hash &lt;span class="caps"&gt;ID&lt;/span&gt; of an existing&amp;nbsp;string.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;spaceship_hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nlp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vocab&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;spaceship&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;spaceship_hash&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2527206094249092639
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you search for a hash that doesn&amp;#8217;t correspond to any string in the vocab, it&amp;#8217;ll throw an&amp;nbsp;error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;nlp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vocab&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4523523&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# has no corresponding string in the vocab&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;KeyError: &amp;quot;[E018] Can&amp;#39;t retrieve string for hash &amp;#39;4523523&amp;#39;.&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The string for hash 4523523 can&amp;#8217;t be retrieved because it doesn&amp;#8217;t match any existing item in the&amp;nbsp;vocab.&lt;/p&gt;
&lt;p&gt;Once we know the hash of a string, we can call it within &lt;code&gt;nlp.vocab.strings&lt;/code&gt; to once again get back the corresponding&amp;nbsp;string.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;spaceship_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nlp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vocab&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;spaceship_hash&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;spaceship_string&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;#39;spaceship&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Entity identification: Fixing up our entities&lt;a name='id'&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You&amp;#8217;ll recall that spaCy incorrectly identified &amp;#8220;12 billion light&amp;#8221; as a &lt;code&gt;MONEY&lt;/code&gt; entity, as well as missed SpaceX altogether. SpaceX should be labelled as an organization &amp;ndash; &lt;code&gt;ORG&lt;/code&gt; &amp;ndash; while we can create a &amp;#8220;distance&amp;#8221; label &amp;ndash; &lt;code&gt;DIST&lt;/code&gt; &amp;ndash; for &amp;#8220;light&amp;nbsp;years&amp;#8221;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;TEXT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;SpaceX&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="n"&gt;spacex_matcher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;matcher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;spacex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;matcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[(1533271143234181118, 1, 2)]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we know the start and stop indices for our SpaceX entity. Let&amp;#8217;s do the same for &amp;#8220;light&amp;nbsp;years&amp;#8221;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;matcher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Matcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nlp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vocab&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LIKE_NUM&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LIKE_NUM&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;POS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ADJ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;POS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;NOUN&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;

&lt;span class="n"&gt;matcher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;is_numeric&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;matches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;matcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;matches&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[(14514059297638010452, 4, 8)]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here I&amp;#8217;m iterating over my matches to check that &lt;code&gt;matched_span&lt;/code&gt; actually returns what we want it to return, which would indicate that the indices returned by the matcher are&amp;nbsp;correct.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;match_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;matched_span&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matched_span&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;light years
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yep, good to&amp;nbsp;go!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;matched_span&lt;/code&gt; originally returned the whole phrase, &amp;#8220;12 billion light years&amp;#8221; because of how I wrote the match pattern. I only want &amp;#8220;light years&amp;#8221; though, so I just added 2 to the start index, to effectively jump past the first two tokens of the match (&amp;#8220;12&amp;nbsp;billion&amp;#8221;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;spacy.tokens&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Doc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Span&lt;/span&gt;

&lt;span class="c1"&gt;# using the start/stop indicies returned to us by the matcher&lt;/span&gt;
&lt;span class="n"&gt;span_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Span&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ORG&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;span_1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;span_1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;span_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Span&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DIST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;span_2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;span_2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Setting the doc&amp;#39;s entities using the span object--this also overwrites the existing incorrect entity&lt;/span&gt;
&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;span_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;span_2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Print entities&amp;#39; text and labels&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;([(&lt;/span&gt;&lt;span class="n"&gt;ent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ent&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ents&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SpaceX ORG
light years DIST
[(&amp;#39;SpaceX&amp;#39;, &amp;#39;ORG&amp;#39;), (&amp;#39;light years&amp;#39;, &amp;#39;DIST&amp;#39;)]
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;displaCy&lt;a name='displacy'&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is probably my favourite feature. Maybe as a linguist I&amp;#8217;m slightly biased toward neat visual respresentations of syntactic parses, but I also think this tool is just pretty objectively&amp;nbsp;cool.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;displaCy takes your doc object and visually depicts its syntactic dependencies, in addition to providing the &lt;span class="caps"&gt;POS&lt;/span&gt; of each&amp;nbsp;word.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First, import displaCy, then instantiate your nlp and doc objects (if you hadn&amp;#8217;t already done so previously), and then call &lt;code&gt;displacy.render&lt;/code&gt; on your doc object (or list of docs!). This will return a dependency-parsed&amp;nbsp;sentence!&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s at this step, within &lt;code&gt;displacy.render&lt;/code&gt;, that you may also specify any additional preferred parameters (which I&amp;#8217;ll go into more&amp;nbsp;below).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;spacy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;displacy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# displacy.serve(doc) returns an html page with your visualization. Useful for longer sentences!&lt;/span&gt;
&lt;span class="c1"&gt;# html = displacy.render(doc) # optional: throw this into a variable, the default in spaCy documentation is &amp;quot;html&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To simplify things a little bit, I&amp;#8217;ll create two new doc objects called &amp;#8220;dogs&amp;#8221; and&amp;nbsp;&amp;#8220;cats&amp;#8221;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;dogs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nlp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Megan loves dogs.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nlp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Mary loves cats.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In &lt;code&gt;displacy.render&lt;/code&gt;, there are two style&amp;nbsp;options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dep&lt;/code&gt; returns a visualization of the syntactic dependencies&amp;nbsp;(default)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ent&lt;/code&gt; returns a prettified sentence which highlights the entities it&amp;nbsp;contains.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For&amp;nbsp;example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;displacy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;dogs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cats&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="entities" style="line-height: 2.5; direction: ltr"&gt;
&lt;mark class="entity" style="background: #aa9cfc; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em; box-decoration-break: clone; -webkit-box-decoration-break: clone"&gt;
    Megan
    &lt;span style="font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; text-transform: uppercase; vertical-align: middle; margin-left: 0.5rem"&gt;&lt;span class="caps"&gt;PERSON&lt;/span&gt;&lt;/span&gt;
&lt;/mark&gt;
 loves dogs.&lt;/div&gt;

&lt;div class="entities" style="line-height: 2.5; direction: ltr"&gt;
&lt;mark class="entity" style="background: #aa9cfc; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em; box-decoration-break: clone; -webkit-box-decoration-break: clone"&gt;
    Mary
    &lt;span style="font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; text-transform: uppercase; vertical-align: middle; margin-left: 0.5rem"&gt;&lt;span class="caps"&gt;PERSON&lt;/span&gt;&lt;/span&gt;
&lt;/mark&gt;
 loves cats.&lt;/div&gt;

&lt;p&gt;&lt;code&gt;displacy.render([dogs, cats], style='dep')&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src='https://i.imgur.com/d5IHB64.png' style='width:450px;'&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;displacy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="entities" style="line-height: 2.5; direction: ltr"&gt;The
&lt;mark class="entity" style="background: #7aecec; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em; box-decoration-break: clone; -webkit-box-decoration-break: clone"&gt;
    SpaceX
    &lt;span style="font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; text-transform: uppercase; vertical-align: middle; margin-left: 0.5rem"&gt;&lt;span class="caps"&gt;ORG&lt;/span&gt;&lt;/span&gt;
&lt;/mark&gt;
 spaceship travelled 12 billion
&lt;mark class="entity" style="background: #ddd; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em; box-decoration-break: clone; -webkit-box-decoration-break: clone"&gt;
    light years
    &lt;span style="font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; text-transform: uppercase; vertical-align: middle; margin-left: 0.5rem"&gt;&lt;span class="caps"&gt;DIST&lt;/span&gt;&lt;/span&gt;
&lt;/mark&gt;
 to explore new galaxies.&lt;/div&gt;

&lt;h3&gt;Customization&lt;a name='custom'&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The function signature for displaCy is as&amp;nbsp;follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Signature&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;displacy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;render&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;docs&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dep&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;False&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;minify&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;False&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;jupyter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;={},&lt;/span&gt;
    &lt;span class="n"&gt;manual&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;False&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Docstring&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;Render&lt;/span&gt; &lt;span class="n"&gt;displaCy&lt;/span&gt; &lt;span class="n"&gt;visualisation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can pass a dictionary of attributes into the &lt;code&gt;options&lt;/code&gt; argument to ultra-customize the viz. Below is a list of valid attributes (option dict&amp;nbsp;keys).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Options:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fine_grained
collapse_punct
collapse_phrases
compact
color
bg
font
offset_x
arrow_stroke
arrow_width
arrow_spacing
word_spacing
distance
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We&amp;#8217;ll go through a few, but to read more about what each of these arguments does, check out the displaCy documentation &lt;a href="https://spacy.io/api/top-level#options"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;word_spacing&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;displacy.render(dogs, style=&amp;#39;dep&amp;#39;, options=options)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src='https://i.imgur.com/FUAfURZ.png' style='width:500px;'&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;distance&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;displacy.render(dogs, style=&amp;#39;dep&amp;#39;, options=options)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src='https://i.imgur.com/jBUcUgv.png' style='width:450px;'&gt;&lt;/p&gt;
&lt;p&gt;In the code block below, I&amp;#8217;m populating the &lt;code&gt;options&lt;/code&gt; dictionary with the features I want to&amp;nbsp;adjust:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;word_spacing&lt;/code&gt; sets the (vertical) space between the words and the&amp;nbsp;arrows&lt;/li&gt;
&lt;li&gt;&lt;code&gt;compact&lt;/code&gt; makes the arrows squared to conserve&amp;nbsp;space&lt;/li&gt;
&lt;li&gt;&lt;code&gt;distance&lt;/code&gt; sets the distance between each of the words (basically, the width of the entire&amp;nbsp;viz)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arrow_spacing&lt;/code&gt; sets the space between arrows (so the smaller the int value you pass, the less space between&amp;nbsp;arrows)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;offset_x&lt;/code&gt; is the amount of space between the &amp;#8220;edge&amp;#8221; of the viz and the first word that&amp;nbsp;appears&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arrow_width&lt;/code&gt; sets the size of the&amp;nbsp;&amp;#8220;arrowhead&amp;#8221;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;color&lt;/code&gt; sets the color of the text and&amp;nbsp;arrows&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bg&lt;/code&gt; sets the background&amp;nbsp;color.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;options = {
    &amp;#39;word_spacing&amp;#39;: 25,
    &amp;#39;compact&amp;#39;: False, # default
    &amp;#39;distance&amp;#39;: 85,
    &amp;#39;arrow_spacing&amp;#39;: 2,
    &amp;#39;offset_x&amp;#39;: 17,
    &amp;#39;arrow_width&amp;#39;: 6,
    &amp;#39;color&amp;#39;: &amp;#39;#ffffff&amp;#39;,
    &amp;#39;bg&amp;#39;: &amp;#39;#0be3df&amp;#39;
}

displacy.render(doc, style=&amp;#39;dep&amp;#39;, options=options)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src='https://i.imgur.com/6aV8j93.png' style='width:1100px;'&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;  &lt;/p&gt;
&lt;h2&gt;&lt;code&gt;spacy.explain&lt;/code&gt;&lt;a name='spacy_explain'&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This method is super great when dealing with abbreviations and shorthands, which tend to be ubiquitous in a package filled with descriptors like &amp;#8220;adverbial clause modifier&amp;#8221;. Not exactly compact. From time to time, we might encounter an abbreviation/label we&amp;#8217;re unfamiliar with, and in such cases we can call &lt;code&gt;spacy.explain&lt;/code&gt;, which &lt;strong&gt;takes any spaCy abbreviation, shorthand or label as a string argument and returns the full name.&lt;/strong&gt; Check it&amp;nbsp;out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;spacy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;explain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;JJ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;#39;adjective&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here&amp;#8217;s a few&amp;nbsp;more:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;advcl:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spacy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;explain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;advcl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;amod:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spacy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;explain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;amod&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;nummod:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spacy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;explain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nummod&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;ORG:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spacy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;explain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ORG&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;advcl&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;adverbial&lt;/span&gt; &lt;span class="n"&gt;clause&lt;/span&gt; &lt;span class="n"&gt;modifier&lt;/span&gt;

&lt;span class="n"&gt;amod&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;adjectival&lt;/span&gt; &lt;span class="n"&gt;modifier&lt;/span&gt;

&lt;span class="n"&gt;nummod&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;numeric&lt;/span&gt; &lt;span class="n"&gt;modifier&lt;/span&gt;

&lt;span class="n"&gt;ORG&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Companies&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;agencies&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;institutions&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;tags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tag_&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;tags&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[&amp;#39;DT&amp;#39;,
 &amp;#39;NNP&amp;#39;,
 &amp;#39;NN&amp;#39;,
 &amp;#39;VBD&amp;#39;,
 &amp;#39;CD&amp;#39;,
 &amp;#39;CD&amp;#39;,
 &amp;#39;JJ&amp;#39;,
 &amp;#39;NNS&amp;#39;,
 &amp;#39;TO&amp;#39;,
 &amp;#39;VB&amp;#39;,
 &amp;#39;JJ&amp;#39;,
 &amp;#39;NNS&amp;#39;,
 &amp;#39;.&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;tags_explained&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;spacy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;explain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can use a simple zip function to create a list of tuples containing each of the tags, along with their respective&amp;nbsp;&amp;#8220;definitions&amp;#8221;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tags_explained&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[(&amp;#39;DT&amp;#39;, &amp;#39;determiner&amp;#39;),
 (&amp;#39;NNP&amp;#39;, &amp;#39;noun, proper singular&amp;#39;),
 (&amp;#39;NN&amp;#39;, &amp;#39;noun, singular or mass&amp;#39;),
 (&amp;#39;VBD&amp;#39;, &amp;#39;verb, past tense&amp;#39;),
 (&amp;#39;CD&amp;#39;, &amp;#39;cardinal number&amp;#39;),
 (&amp;#39;CD&amp;#39;, &amp;#39;cardinal number&amp;#39;),
 (&amp;#39;JJ&amp;#39;, &amp;#39;adjective&amp;#39;),
 (&amp;#39;NNS&amp;#39;, &amp;#39;noun, plural&amp;#39;),
 (&amp;#39;TO&amp;#39;, &amp;#39;infinitival to&amp;#39;),
 (&amp;#39;VB&amp;#39;, &amp;#39;verb, base form&amp;#39;),
 (&amp;#39;JJ&amp;#39;, &amp;#39;adjective&amp;#39;),
 (&amp;#39;NNS&amp;#39;, &amp;#39;noun, plural&amp;#39;),
 (&amp;#39;.&amp;#39;, &amp;#39;punctuation mark, sentence closer&amp;#39;)]
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Hope you enjoyed this introduction to spaCy! Now go have some fun with words&amp;nbsp;😏&lt;/h4&gt;</content><category term="python"></category><category term="spaCy"></category><category term="NLP"></category></entry><entry><title>Altair to the Rescue: A beginner-friendly altair tutorial</title><link href="https://megankarabin.github.io/cyberlingual/altair.html" rel="alternate"></link><published>2019-07-07T08:00:00-04:00</published><updated>2019-07-07T08:00:00-04:00</updated><author><name>Megan Karabin</name></author><id>tag:megankarabin.github.io,2019-07-07:/cyberlingual/altair.html</id><summary type="html">&lt;p&gt;&lt;img src='images\charts_stock.png' alt='Drawing' style='width:500px;'&gt;
&lt;em&gt;&lt;a href="https://www.economist.com/offthecharts/_next/static/images/offTheCharts-8552c80b7b927f2d0f3b91fe70b96521.png"&gt;Image&amp;nbsp;source&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Some charts are confusing, some hard to interpret, and others are just boring, while still others (albeit a special, minority few) require that the rules of math and logic break in order to establish a reality in which they make sense. By manipulating data, not only is it …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src='images\charts_stock.png' alt='Drawing' style='width:500px;'&gt;
&lt;em&gt;&lt;a href="https://www.economist.com/offthecharts/_next/static/images/offTheCharts-8552c80b7b927f2d0f3b91fe70b96521.png"&gt;Image&amp;nbsp;source&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Some charts are confusing, some hard to interpret, and others are just boring, while still others (albeit a special, minority few) require that the rules of math and logic break in order to establish a reality in which they make sense. By manipulating data, not only is it possible to tell a story, but to frame it in a way that fits a particular narrative. How we choose to represent data visually is a crucial part of telling the&amp;nbsp;story.&lt;/p&gt;
&lt;p&gt;This post covers the basics of Altair, walking through the first steps needed to create a visualization, and involves taking some pretty terrible charts and remaking them into their best&amp;nbsp;selves.&lt;/p&gt;
&lt;h2&gt;Table of&amp;nbsp;Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#bar_charts"&gt;Making bar charts in Altair&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#colours"&gt;Using&amp;nbsp;colours&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#axis_info"&gt;Specifying axis&amp;nbsp;information&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#size"&gt;Size&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#title"&gt;Title&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#line_chart_makeover"&gt;Line chart makeover&amp;nbsp;1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#line_chart_makeover_2"&gt;Line chart makeover&amp;nbsp;2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#before_afters"&gt;Before &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt;&amp;nbsp;Afters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Packages&amp;nbsp;used:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;altair&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;alt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;renderers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;notebook&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;nbsp;  &lt;/p&gt;
&lt;h2&gt;Making bar charts in Altair &lt;a name='bar_charts'&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Humans aren&amp;#8217;t great at estimating area or visual divisions of area. For this reason, donut charts are not optimal for comparing two proportions visually&amp;mdash;bar charts work much better for&amp;nbsp;this.&lt;/p&gt;
&lt;p&gt;&lt;img src="images\donut-complaints.png" alt="Drawing" style="width: 400px;"/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;This graphic is a breakdown of the discrimination complaints received by the Canadian Human Rights Commission in 2017-18. In that year, disability complaints represented 59% of complaints while 41% of complaints were other.&amp;#8221;&lt;/em&gt; (From the 2018 Federal&amp;nbsp;budget)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;The easiest way to fix this is to spin up a super simple dataset representing these&amp;nbsp;data.&lt;/h4&gt;
&lt;p&gt;&amp;nbsp;&lt;br&gt;
Altair charts take pandas dataframes as arguments, so we throw our simple dataset into one with &lt;code&gt;pd.DataFrame()&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;complaint type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;disability-related&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;other&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;quantity&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.59&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.41&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="n"&gt;df&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;nbsp;  &lt;/p&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;complaint type&lt;/th&gt;
      &lt;th&gt;quantity&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;disability-related&lt;/td&gt;
      &lt;td&gt;0.59&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;other&lt;/td&gt;
      &lt;td&gt;0.41&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Now we&amp;#8217;ll try out the simplest visualization possible.
 &lt;!-- (one that is hopefully already a more successful representation of data than donut chart up there) --&gt;
&amp;nbsp;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark_bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sum(quantity)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# the &amp;#39;x&amp;#39; channel&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;complaint type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# the &amp;#39;y&amp;#39; channel&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="png" src="images/blog-2-altair_24_2.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here&amp;#8217;s a quick breakdown of what&amp;#8217;s happening&amp;nbsp;here:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;alt.Chart(df)&lt;/code&gt; specifies the data you want to use in your chart (where df = your pandas&amp;nbsp;dataframe)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.mark_bar()&lt;/code&gt; specifies a bar chart as the type of visualization you want to&amp;nbsp;use.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.encode()&lt;/code&gt; is where you input (i.e., encode) your chart axes.
 - You can map any column in your dataset to either the &amp;#8216;x&amp;#8217; or &amp;#8216;y&amp;#8217; encoding channel (each channel corresponds to the x- and y-axis, respectively).
 - Read more in the Altair documentation &lt;a href="https://altair-viz.github.io/getting_started/starting.html#basic-tutorial-encodings-and-marks"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Using colours&lt;a name='colours'&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;complaint type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# setting colour to correspond to the selected column&lt;/span&gt;

&lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark_bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sum(quantity)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;complaint type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="png" src="images/blog-2-altair_27_2.png"&gt;&lt;/p&gt;
&lt;p&gt;To set a particular colour scheme, use &lt;code&gt;scale=alt.Scale(scheme='scheme name')&lt;/code&gt; in the &lt;code&gt;alt.Color&lt;/code&gt; method.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;complaint type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scheme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;reds&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark_bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sum(quantity)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;complaint type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="png" src="images/blog-2-altair_29_2.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here are a few more single-hue colour&amp;nbsp;schemes:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;teals&lt;/li&gt;
&lt;li&gt;oranges&lt;/li&gt;
&lt;li&gt;reds&lt;/li&gt;
&lt;li&gt;purples (&amp;#8230;you get the&amp;nbsp;point.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;The following are several more categorical and multi-hue schemes I&amp;nbsp;like:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;plasma&lt;/li&gt;
&lt;li&gt;magma&lt;/li&gt;
&lt;li&gt;accent&lt;/li&gt;
&lt;li&gt;dark2&lt;/li&gt;
&lt;li&gt;set3&lt;/li&gt;
&lt;li&gt;tableau10&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Visit Vega&amp;#8217;s &lt;a href="https://vega.github.io/vega/docs/schemes/#categorical"&gt;colour scheme page&lt;/a&gt; for even more&amp;nbsp;options!&lt;/p&gt;
&lt;p&gt;A default legend is provided when you set colour on a column to show you what category/value each colour corresponds to. This can be helpful but might actually be redundant, and therefore unnecessary in this case, since the information provieded by the legend is already encoded and labelled on the chart itself. To remove the legend, simply set &lt;code&gt;legend=None&lt;/code&gt; in the color property. It should look something like&amp;nbsp;this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;alt.Color('column to set color on', legend=None)&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;What if I want to swap the colours of the&amp;nbsp;bars?&lt;/h4&gt;
&lt;p&gt;In the &lt;code&gt;alt.Color()&lt;/code&gt; method, which uses Vega&amp;#8217;s colour schemes, discrete colours are assigned such that the index of the value in the column you&amp;#8217;ve set &lt;code&gt;color&lt;/code&gt; on matches the index of the colour in the scheme (at the row that corresponds to the number of values present in your column). I encoded the values for &lt;code&gt;'complaint type'&lt;/code&gt; as &lt;code&gt;['disability-related', 'other']&lt;/code&gt;, so the default setting assigns &lt;code&gt;'disability-related'&lt;/code&gt; the lighter, first-appearing colour in the image below at row&amp;nbsp;2.&lt;/p&gt;
&lt;p&gt;&lt;img src="images/colour_scheme.png" style="width: 400px;"&gt;&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;domain&lt;/code&gt; argument of Scale &amp;ndash; inside &lt;code&gt;alt.Color(scheme=alt.Scale())&lt;/code&gt;) &amp;ndash; we can rearrange the order of the values so that they correspond to the order of the colours we want to assign them. Since the categories were originally encoded as &lt;code&gt;['disability-related', 'other']&lt;/code&gt;, and we want to switch the colour assignments, we do so such that the order matches the order of the colours&amp;mdash;so, in this case we&amp;#8217;d&amp;nbsp;want:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;`domain=[&amp;#39;other&amp;#39;, &amp;#39;disability-related&amp;#39;]`.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Of course alternatively we could just go back and change the order of the values where we first encoded them into the dataset, but this is an easy way to alter things without having to go back and make actual changes to the&amp;nbsp;data.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;complaint type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scheme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;reds&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;other&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;disability-related&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

&lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark_bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sum(quantity)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;complaint type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="png" src="images/blog-2-altair_36_2.png"&gt;&lt;/p&gt;
&lt;h3&gt;Specifying axis information&lt;a name='axis_info'&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We use &lt;code&gt;alt.X()&lt;/code&gt; when we want to encode more than just the column name&amp;mdash;maybe we want to include an axis title, formatting (e.g., displaying as percentage, adjusting scale), labels and ticks,&amp;nbsp;etc.&lt;/p&gt;
&lt;p&gt;To add formatting and set the axis title, I&amp;#8217;ll use &lt;code&gt;alt.Axis()&lt;/code&gt; with the arguments &amp;#8220;format&amp;#8221;, which sets the text formatting pattern, and &amp;#8220;title&amp;#8221; (as shown in the following code). I like to keep the code in the chart specification as clean as possible, so I prefer building up this extra information outside of the &lt;code&gt;alt.Chart()&lt;/code&gt; function. I&amp;#8217;ll assign &lt;code&gt;alt.Axis(format='%', title='percentage of total complaints')&lt;/code&gt; to a variable called &lt;code&gt;x_axis&lt;/code&gt; so that I can simply call it from within &lt;code&gt;alt.X()&lt;/code&gt; and pass it as the axis&amp;nbsp;argument.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x_axis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Axis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;percentage of total complaints&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Size&lt;a name='size'&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;Bars:&lt;/h4&gt;
&lt;p&gt;You can alter the width of the bars by setting &lt;code&gt;size=desired size as float or int&lt;/code&gt; in the &lt;code&gt;mark_*&lt;/code&gt; method, as I&amp;#8217;ve done below to make the bars a bit wider than the default&amp;nbsp;width.&lt;/p&gt;
&lt;h4&gt;Chart:&lt;/h4&gt;
&lt;p&gt;To adjust the size of the chart, we can set custom measurements with &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; in the &lt;code&gt;.properties()&lt;/code&gt; method.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;chart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark_bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sum(quantity)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x_axis&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;complaint type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;

&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Breakdown of complaints made to Canadian Human Rights Commission (2018)&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Title&lt;a name='title'&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Every chart should have a title&amp;mdash;donut chart is lacking here. To customize your chart title, use &lt;code&gt;chart.configure_title&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;Some useful&amp;nbsp;attributes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;anchor&lt;/code&gt; sets the title alignment. Valid inputs are &amp;#8216;start&amp;#8217; (right alignment), &amp;#8216;middle&amp;#8217; (centre) and &amp;#8216;end&amp;#8217;&amp;nbsp;(left).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;orient&lt;/code&gt; set the position of the title. Valid inputs are &amp;#8216;top&amp;#8217;, &amp;#8216;bottom&amp;#8217;, &amp;#8216;left&amp;#8217; and &amp;#8216;right&amp;#8217; (with top/bottom corresponding to above/below the&amp;nbsp;chart).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fontSize&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;font&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;color&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note: By throwing our chart into a variable called &lt;code&gt;chart&lt;/code&gt;, we can access it in other instances without having to repeatedly include all of the code for the&amp;nbsp;visualization.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;chart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configure_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;fontSize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Helvetica&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;anchor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;middle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;black&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="png" src="images/blog-2-altair_45_2.png"&gt;&lt;/p&gt;
&lt;p&gt;Voilà! Now this data is truly living its best&amp;nbsp;life.&lt;/p&gt;
&lt;h2&gt;Line chart makeover&lt;a name='line_chart_makeover'&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src='images/ghg-emissions.jpeg' style="width: 700px;"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Taken from the provinical government&amp;#8217;s &lt;a href="http://budget.ontario.ca/2019/chapter-1c.html#c1-20"&gt;2019&amp;nbsp;budget&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;What&amp;#8217;s wrong with this&amp;nbsp;picture?&lt;/h3&gt;
&lt;p&gt;There&amp;#8217;s no unit given for the scale on the y-axis. At first glance, it seems that while Ontario and Canada begin at the same starting point (&amp;#8220;1&amp;#8221;) in 2005, Ontario&amp;#8217;s &lt;span class="caps"&gt;GHG&lt;/span&gt; emissions decline sharply while &amp;#8220;the rest of Canada&amp;#8221; experiences little variation over the same period. Notice, however, the incongruency between the title and subtitle (which supposedly describes what&amp;#8217;s being measured)&amp;mdash;&amp;#8220;Ontario &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Friends&amp;#8217; Greenhouse Gas &lt;em&gt;Emissions&lt;/em&gt; from 2005 to 2016&amp;#8221; versus &amp;#8220;&lt;span class="caps"&gt;GHG&lt;/span&gt; Emissions &lt;em&gt;Index&lt;/em&gt;&amp;#8220;. An index of emissions is quite different from actual emissions in a valid unit of measurement, like megatonnes (Mt) of &lt;span class="caps"&gt;CO2&lt;/span&gt;. This is the unit used in the source data, and the unit I&amp;#8217;ll be using in my reconstructed&amp;nbsp;visualization.&lt;/p&gt;
&lt;p&gt;Just doing some basic data cleaning here so I can access the relevant data from the &lt;a href="http://publications.gc.ca/collections/collection_2018/eccc/En81-4-2016-1-eng.pdf"&gt;National Inventory Report from Environment Canada&lt;/a&gt; (the same source used for the above&amp;nbsp;chart).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ghg-emissions-data.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;–&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2005-2016&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1990&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset_index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;province&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;provinces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;ordered_vals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;province&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;ordered_vals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;prov&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;provinces&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prov&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;emissions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ordered_vals&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;province&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;provinces&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;year&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;

&lt;span class="n"&gt;nat_drop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;province&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Canada&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;provs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nat_drop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here I&amp;#8217;ve created a dataframe containing data on Canada&amp;#8217;s greenhouse gas (&lt;span class="caps"&gt;GHG&lt;/span&gt;) emissions and including the number of emissions (in Mt of &lt;span class="caps"&gt;CO2&lt;/span&gt;), the year over which the emissions were released, and the province the emissions came from. &lt;code&gt;provs&lt;/code&gt; is a second dataset not including the national total of emissions, whereas this figure is included in &lt;code&gt;data&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s also a &lt;code&gt;point&lt;/code&gt; argument for the &lt;code&gt;mark_line()&lt;/code&gt; method. If we set &lt;code&gt;point=True&lt;/code&gt;, we get the line as well as a visual representation of each of the individual data points it intersects. This can be useful for when the data is on the sparse side, and makes it clear where the actual data sit. Remember, unless you have an inordinate number of datapoints, the line is just the trend between two points. Anywhere on the line &lt;em&gt;between&lt;/em&gt; two points&amp;mdash;say, Canada&amp;#8217;s line at the x-value halfway between 2012 and 2013&amp;mdash;isn&amp;#8217;t necessarily representative of the true y-values (emissions) at that value of x (circa July&amp;nbsp;2012).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;chart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;provs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;year:N&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;emissions:Q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;province:N&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                   &lt;span class="n"&gt;scheme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;category20&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                   &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GHG emissions by province&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;chart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configure_axisX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;labelAngle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# this sets the angle of the x-ticks&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="png" src="images/blog-2-altair_55_2.png"&gt;&lt;/p&gt;
&lt;p&gt;As we can see, Ontario is actually still producing a far greater quantity of emissions than any other province except for Alberta. The following is the text accompanying the original&amp;nbsp;chart:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Ontario has been a leader in the efforts to tackle climate change. Compared with 2005, the province’s total greenhouse gas emissions have dropped by 22 per cent — even while the rest of Canada saw emissions increase by three per cent during the same time&amp;nbsp;period.&amp;#8221;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In splitting the data this way (Ontario vs. the rest of Canada) the trend observed for &amp;#8220;the rest of Canada&amp;#8221; is highly influenced by Alberta&amp;#8217;s emissions. That is, the only reason the rest of Canada saw a 3% increase in emissions is because Alberta saw a substantial increase, while most other provinces either stayed the same or saw a decrease in&amp;nbsp;emissions.&lt;/p&gt;
&lt;p&gt;&lt;img src='images/i-see-u.jpeg' style="width: 100px;"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;canada_tot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;province&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Canada&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;ontario&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;province&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ON&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;ontario&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;emissions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;emissions_on&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;province&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;province_on&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;can_on&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;canada_tot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ontario&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;year&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;# Subtracting Ontario&amp;#39;s yearly emissions from Canada&amp;#39;s total yearly emissions in order to plot&lt;/span&gt;
&lt;span class="c1"&gt;# Ontario against the rest of Canada&lt;/span&gt;
&lt;span class="n"&gt;rest_of_canada&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;can_on&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;emissions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;           
    &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;can_on&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;can_on&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;emissions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;can_on&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;rest_of_canada&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;can_on&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rest_of_canada&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rest_of_canada&lt;/span&gt;

&lt;span class="n"&gt;rest_of_canada&lt;/span&gt; &lt;span class="c1"&gt;# this now includes all the values of GHG emissions from every province but Ontario.&lt;/span&gt;


&lt;span class="c1"&gt;# spinning up a new dataframe with the values for the rest of Canada&lt;/span&gt;
&lt;span class="n"&gt;canada_minus_on&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;emissions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rest_of_canada&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;province&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rest_of_canada&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rest_of_canada&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rest_of_canada&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rest_of_canada&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rest_of_canada&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;\
                 &lt;span class="s1"&gt;&amp;#39;rest_of_canada&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rest_of_canada&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;year&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2005&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2011&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2012&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2013&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="n"&gt;totals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;provs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;canada_minus_on&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# comparing Ontario and the rest of Canada&lt;/span&gt;
&lt;span class="n"&gt;can_vs_on&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;totals&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;totals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;province&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rest_of_canada&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;totals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;province&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ON&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Finally, a slightly more accurate visual depiction of these&amp;nbsp;data.&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Axis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;emissions (in Mt of CO2)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;chart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;can_vs_on&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;year:N&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;emissions:Q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;province:N&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                   &lt;span class="n"&gt;scheme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;plasma&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                   &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Ontario and the Rest of Canada&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;s GHG Emissions from 2005 to 2016&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;chart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configure_axisX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;labelAngle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# this sets the angle of the x-ticks&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="png" src="images/blog-2-altair_60_2.png"&gt;&lt;/p&gt;
&lt;p&gt;From this representation, it&amp;#8217;s clear that Ontario and the rest of Canada have drastically different starting points&amp;mdash;quite contrary to what the chart from the budget would have you&amp;nbsp;think.&lt;/p&gt;
&lt;h2&gt;Another line chart makeover&lt;a name='line_chart_makeover_2'&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src="images/aul-fakenews.jpeg" style="width: 600px;"&gt;  &lt;/p&gt;
&lt;h4&gt;What&amp;#8217;s wrong with this&amp;nbsp;picture?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;No scale for&amp;nbsp;y-axis&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Missing axis&amp;nbsp;labels&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Differing y-axes for each line, since the number of prevention services performed in 2013 still far exceeds the number of abortions (in the order of 600,000), and yet the prevention data at 2013 is depicted as below the data for abortions at the exact same&amp;nbsp;x-value.&lt;/p&gt;
&lt;p&gt;&lt;img src='images/side-eye.png' style="width: 200px;"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You&amp;#8217;ll also notice the slopes of the lines are about the same, upon quick visual inspection. The difference between abortions performed in 2006 (289,750) and those performed in 2013 (327,000) is much less than the difference between prevention services performed in 2006 (2,007,371) and those performed in 2013 (935,573). We can further quantify this by comparing the&amp;nbsp;slopes:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;The slope of A (abortions) is: {round((327_000 - 289_750) / (2013 - 2006), 2)}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;The slope of B (cancer screening and prevention services) is: {(935_573 - 2_007_371) / (2013 - 2006)}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;The slope of A (abortions) is: 5321.43
The slope of B (cancer screening and prevention services) is: -153114.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;center&gt;
&lt;em&gt;m&lt;sub&gt;A&lt;/sub&gt;&lt;/em&gt; =&amp;nbsp;5321.43&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;em&gt;m&lt;sub&gt;B&lt;/sub&gt;&lt;/em&gt; =&amp;nbsp;-153114.0&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;
 &lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What does this&amp;nbsp;mean?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Every year (i.e., for every 1 unit in increase along the x-axis), there are 5321 more abortions&amp;nbsp;performed.&lt;/p&gt;
&lt;p&gt;Every year, there are 153114 fewer prevention and screening services&amp;nbsp;performed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;aul_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;service&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;abortion&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;abortion&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cancer screening &amp;amp; prevention&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; \
                &lt;span class="s1"&gt;&amp;#39;cancer screening &amp;amp; prevention&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;services performed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="mi"&gt;289&lt;/span&gt;&lt;span class="n"&gt;_750&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;327&lt;/span&gt;&lt;span class="n"&gt;_000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;_007_371&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;985&lt;/span&gt;&lt;span class="n"&gt;_573&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;year&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2006&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2013&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2006&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2013&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="n"&gt;aul_df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aul_df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%Y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;aul_df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;services performed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;aul_df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;services performed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x_axis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Axis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Year&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;titleFontSize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;y_axis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Axis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Services Performed (in thousands)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;titleFontSize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;service&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scheme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;magma&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;   

&lt;span class="n"&gt;ppchart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aul_df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark_line&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;year&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x_axis&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;services performed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;y_axis&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;

&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Planned Parenthood Services Performed in 2006 and 2013&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;ppchart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configure_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;anchor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;middle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;fontSize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;black&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Helvetica&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;ppchart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configure_legend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;strokeColor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;gray&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;fillColor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#EEEEEE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;cornerRadius&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;orient&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;top-right&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="png" src="images/blog-2-altair_70_2.png"&gt;&lt;/p&gt;
&lt;p&gt;How this chart is&amp;nbsp;better:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;uses a valid, to-scale&amp;nbsp;y-axis&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;labels for both&amp;nbsp;axes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;it has a consistent, shared y-axis for both&amp;nbsp;lines.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;✨Before &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Afters ✨&lt;a name='before_afters'&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2&gt;Chart&amp;nbsp;1&lt;/h2&gt;
&lt;p&gt;&lt;tr&gt;
    &lt;td&gt; &lt;img src="images\images\donut-complaints.png" alt="Drawing" style="width: 300px;"/&gt; &lt;/td&gt;
    &lt;td&gt; &lt;img src="images\images\complaints.svg" alt="Drawing" style="width: 650px;"/&gt; &lt;/td&gt;
    &lt;/tr&gt;&lt;/p&gt;
&lt;h2&gt;Chart&amp;nbsp;2&lt;/h2&gt;
&lt;p&gt;&lt;tr&gt;
    &lt;td&gt; &lt;img src="images\ghg-emissions.jpeg" alt="Drawing" style="width: 600px;"/&gt; &lt;/td&gt;
    &lt;td&gt; &lt;img src="images\emissions-1.svg" alt="Drawing" style="width: 700px;"/&gt; &lt;/td&gt;
    &lt;/tr&gt;&lt;/p&gt;
&lt;h2&gt;Chart&amp;nbsp;3&lt;/h2&gt;
&lt;p&gt;&lt;tr&gt;
    &lt;td&gt; &lt;img src="images\aul-fakenews.jpeg" alt="Drawing" style="width: 500px;"/&gt; &lt;/td&gt;
    &lt;td&gt; &lt;img src="images\pp-visualization.svg" alt="Drawing" style="width: 500px;"/&gt; &lt;/td&gt;
    &lt;/tr&gt;&lt;/p&gt;
&lt;h3&gt;Good luck making great visualizations with Altair&amp;nbsp;🚀&lt;/h3&gt;</content><category term="python"></category><category term="altair"></category><category term="data visualization"></category></entry></feed>